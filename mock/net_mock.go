// Code generated by MockGen. DO NOT EDIT.
// Source: net_interface.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	net "chainmaker.org/chainmaker/pb-go/net"
	protocol "chainmaker.org/chainmaker-go/protocol"
	gomock "github.com/golang/mock/gomock"
)

// MockChainNodesInfoProvider is a mock of ChainNodesInfoProvider interface.
type MockChainNodesInfoProvider struct {
	ctrl     *gomock.Controller
	recorder *MockChainNodesInfoProviderMockRecorder
}

// MockChainNodesInfoProviderMockRecorder is the mock recorder for MockChainNodesInfoProvider.
type MockChainNodesInfoProviderMockRecorder struct {
	mock *MockChainNodesInfoProvider
}

// NewMockChainNodesInfoProvider creates a new mock instance.
func NewMockChainNodesInfoProvider(ctrl *gomock.Controller) *MockChainNodesInfoProvider {
	mock := &MockChainNodesInfoProvider{ctrl: ctrl}
	mock.recorder = &MockChainNodesInfoProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChainNodesInfoProvider) EXPECT() *MockChainNodesInfoProviderMockRecorder {
	return m.recorder
}

// GetChainNodesInfo mocks base method.
func (m *MockChainNodesInfoProvider) GetChainNodesInfo() ([]*protocol.ChainNodeInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainNodesInfo")
	ret0, _ := ret[0].([]*protocol.ChainNodeInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetChainNodesInfo indicates an expected call of GetChainNodesInfo.
func (mr *MockChainNodesInfoProviderMockRecorder) GetChainNodesInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainNodesInfo", reflect.TypeOf((*MockChainNodesInfoProvider)(nil).GetChainNodesInfo))
}

// MockNetService is a mock of NetService interface.
type MockNetService struct {
	ctrl     *gomock.Controller
	recorder *MockNetServiceMockRecorder
}

// MockNetServiceMockRecorder is the mock recorder for MockNetService.
type MockNetServiceMockRecorder struct {
	mock *MockNetService
}

// NewMockNetService creates a new mock instance.
func NewMockNetService(ctrl *gomock.Controller) *MockNetService {
	mock := &MockNetService{ctrl: ctrl}
	mock.recorder = &MockNetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNetService) EXPECT() *MockNetServiceMockRecorder {
	return m.recorder
}

// BroadcastMsg mocks base method.
func (m *MockNetService) BroadcastMsg(msg []byte, msgType net.NetMsg_MsgType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastMsg", msg, msgType)
	ret0, _ := ret[0].(error)
	return ret0
}

// BroadcastMsg indicates an expected call of BroadcastMsg.
func (mr *MockNetServiceMockRecorder) BroadcastMsg(msg, msgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMsg", reflect.TypeOf((*MockNetService)(nil).BroadcastMsg), msg, msgType)
}

// CancelConsensusSubscribe mocks base method.
func (m *MockNetService) CancelConsensusSubscribe(msgType net.NetMsg_MsgType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelConsensusSubscribe", msgType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelConsensusSubscribe indicates an expected call of CancelConsensusSubscribe.
func (mr *MockNetServiceMockRecorder) CancelConsensusSubscribe(msgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelConsensusSubscribe", reflect.TypeOf((*MockNetService)(nil).CancelConsensusSubscribe), msgType)
}

// CancelSubscribe mocks base method.
func (m *MockNetService) CancelSubscribe(msgType net.NetMsg_MsgType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelSubscribe", msgType)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelSubscribe indicates an expected call of CancelSubscribe.
func (mr *MockNetServiceMockRecorder) CancelSubscribe(msgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelSubscribe", reflect.TypeOf((*MockNetService)(nil).CancelSubscribe), msgType)
}

// ConsensusBroadcastMsg mocks base method.
func (m *MockNetService) ConsensusBroadcastMsg(msg []byte, msgType net.NetMsg_MsgType) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusBroadcastMsg", msg, msgType)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsensusBroadcastMsg indicates an expected call of ConsensusBroadcastMsg.
func (mr *MockNetServiceMockRecorder) ConsensusBroadcastMsg(msg, msgType interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusBroadcastMsg", reflect.TypeOf((*MockNetService)(nil).ConsensusBroadcastMsg), msg, msgType)
}

// ConsensusSubscribe mocks base method.
func (m *MockNetService) ConsensusSubscribe(msgType net.NetMsg_MsgType, handler protocol.MsgHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsensusSubscribe", msgType, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsensusSubscribe indicates an expected call of ConsensusSubscribe.
func (mr *MockNetServiceMockRecorder) ConsensusSubscribe(msgType, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsensusSubscribe", reflect.TypeOf((*MockNetService)(nil).ConsensusSubscribe), msgType, handler)
}

// GetChainNodesInfoProvider mocks base method.
func (m *MockNetService) GetChainNodesInfoProvider() protocol.ChainNodesInfoProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetChainNodesInfoProvider")
	ret0, _ := ret[0].(protocol.ChainNodesInfoProvider)
	return ret0
}

// GetChainNodesInfoProvider indicates an expected call of GetChainNodesInfoProvider.
func (mr *MockNetServiceMockRecorder) GetChainNodesInfoProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetChainNodesInfoProvider", reflect.TypeOf((*MockNetService)(nil).GetChainNodesInfoProvider))
}

// GetNodeUidByCertId mocks base method.
func (m *MockNetService) GetNodeUidByCertId(certId string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNodeUidByCertId", certId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNodeUidByCertId indicates an expected call of GetNodeUidByCertId.
func (mr *MockNetServiceMockRecorder) GetNodeUidByCertId(certId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodeUidByCertId", reflect.TypeOf((*MockNetService)(nil).GetNodeUidByCertId), certId)
}

// ReceiveMsg mocks base method.
func (m *MockNetService) ReceiveMsg(msgType net.NetMsg_MsgType, handler protocol.MsgHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReceiveMsg", msgType, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReceiveMsg indicates an expected call of ReceiveMsg.
func (mr *MockNetServiceMockRecorder) ReceiveMsg(msgType, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReceiveMsg", reflect.TypeOf((*MockNetService)(nil).ReceiveMsg), msgType, handler)
}

// SendMsg mocks base method.
func (m *MockNetService) SendMsg(msg []byte, msgType net.NetMsg_MsgType, to ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{msg, msgType}
	for _, a := range to {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SendMsg", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNetServiceMockRecorder) SendMsg(msg, msgType interface{}, to ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{msg, msgType}, to...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNetService)(nil).SendMsg), varargs...)
}

// Start mocks base method.
func (m *MockNetService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockNetServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockNetService)(nil).Start))
}

// Stop mocks base method.
func (m *MockNetService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockNetServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockNetService)(nil).Stop))
}

// Subscribe mocks base method.
func (m *MockNetService) Subscribe(msgType net.NetMsg_MsgType, handler protocol.MsgHandler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", msgType, handler)
	ret0, _ := ret[0].(error)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockNetServiceMockRecorder) Subscribe(msgType, handler interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockNetService)(nil).Subscribe), msgType, handler)
}
