//
//Copyright (C) BABEC. All rights reserved.
//
//SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.6
// source: contract.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ContractName int32

const (
	// system chain configuration contract
	// used to add, delete and change the chain configuration
	ContractName_SYSTEM_CONTRACT_CHAIN_CONFIG ContractName = 0
	// system chain query contract
	// used to query the configuration on the chain
	ContractName_SYSTEM_CONTRACT_QUERY ContractName = 1
	// system certificate storage contract
	// used to manage certificates
	ContractName_SYSTEM_CONTRACT_CERT_MANAGE ContractName = 2
	// governance contract
	ContractName_SYSTEM_CONTRACT_GOVERNANCE ContractName = 3
	// multi signature contract on chain
	ContractName_SYSTEM_CONTRACT_MULTI_SIGN ContractName = 4
	// contract state
	ContractName_SYSTEM_CONTRACT_STATE ContractName = 5
	// private compute contract
	ContractName_SYSTEM_CONTRACT_PRIVATE_COMPUTE ContractName = 6
	// erc20 contract for DPoS
	ContractName_SYSTEM_CONTRACT_DPOS_ERC20 ContractName = 7
	// stake contract for dpos
	ContractName_SYSTEM_CONTRACT_DPOS_STAKE ContractName = 8
)

// Enum value maps for ContractName.
var (
	ContractName_name = map[int32]string{
		0: "SYSTEM_CONTRACT_CHAIN_CONFIG",
		1: "SYSTEM_CONTRACT_QUERY",
		2: "SYSTEM_CONTRACT_CERT_MANAGE",
		3: "SYSTEM_CONTRACT_GOVERNANCE",
		4: "SYSTEM_CONTRACT_MULTI_SIGN",
		5: "SYSTEM_CONTRACT_STATE",
		6: "SYSTEM_CONTRACT_PRIVATE_COMPUTE",
		7: "SYSTEM_CONTRACT_DPOS_ERC20",
		8: "SYSTEM_CONTRACT_DPOS_STAKE",
	}
	ContractName_value = map[string]int32{
		"SYSTEM_CONTRACT_CHAIN_CONFIG":    0,
		"SYSTEM_CONTRACT_QUERY":           1,
		"SYSTEM_CONTRACT_CERT_MANAGE":     2,
		"SYSTEM_CONTRACT_GOVERNANCE":      3,
		"SYSTEM_CONTRACT_MULTI_SIGN":      4,
		"SYSTEM_CONTRACT_STATE":           5,
		"SYSTEM_CONTRACT_PRIVATE_COMPUTE": 6,
		"SYSTEM_CONTRACT_DPOS_ERC20":      7,
		"SYSTEM_CONTRACT_DPOS_STAKE":      8,
	}
)

func (x ContractName) Enum() *ContractName {
	p := new(ContractName)
	*p = x
	return p
}

func (x ContractName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContractName) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[0].Descriptor()
}

func (ContractName) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[0]
}

func (x ContractName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContractName.Descriptor instead.
func (ContractName) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{0}
}

type QueryFunction int32

const (
	// get block by transactionId
	QueryFunction_GET_BLOCK_BY_TX_ID QueryFunction = 0
	// get contract information
	QueryFunction_GET_CONTRACT_INFO QueryFunction = 1
	// get transaction by transactionId
	QueryFunction_GET_TX_BY_TX_ID QueryFunction = 2
	// get block by block height
	QueryFunction_GET_BLOCK_BY_HEIGHT QueryFunction = 3
	// get chain information
	QueryFunction_GET_CHAIN_INFO QueryFunction = 4
	// get the last configuration block
	QueryFunction_GET_LAST_CONFIG_BLOCK QueryFunction = 5
	// get block by block hash
	QueryFunction_GET_BLOCK_BY_HASH QueryFunction = 6
	// get the list of node
	QueryFunction_GET_NODE_CHAIN_LIST QueryFunction = 7
	// get governance information
	QueryFunction_GET_GOVERNANCE_CONTRACT QueryFunction = 8
	// get read/write set information by eight
	QueryFunction_GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT QueryFunction = 9
	// get read/write set information by hash
	QueryFunction_GET_BLOCK_WITH_TXRWSETS_BY_HASH QueryFunction = 10
	// get the last block
	QueryFunction_GET_LAST_BLOCK QueryFunction = 11
)

// Enum value maps for QueryFunction.
var (
	QueryFunction_name = map[int32]string{
		0:  "GET_BLOCK_BY_TX_ID",
		1:  "GET_CONTRACT_INFO",
		2:  "GET_TX_BY_TX_ID",
		3:  "GET_BLOCK_BY_HEIGHT",
		4:  "GET_CHAIN_INFO",
		5:  "GET_LAST_CONFIG_BLOCK",
		6:  "GET_BLOCK_BY_HASH",
		7:  "GET_NODE_CHAIN_LIST",
		8:  "GET_GOVERNANCE_CONTRACT",
		9:  "GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT",
		10: "GET_BLOCK_WITH_TXRWSETS_BY_HASH",
		11: "GET_LAST_BLOCK",
	}
	QueryFunction_value = map[string]int32{
		"GET_BLOCK_BY_TX_ID":                0,
		"GET_CONTRACT_INFO":                 1,
		"GET_TX_BY_TX_ID":                   2,
		"GET_BLOCK_BY_HEIGHT":               3,
		"GET_CHAIN_INFO":                    4,
		"GET_LAST_CONFIG_BLOCK":             5,
		"GET_BLOCK_BY_HASH":                 6,
		"GET_NODE_CHAIN_LIST":               7,
		"GET_GOVERNANCE_CONTRACT":           8,
		"GET_BLOCK_WITH_TXRWSETS_BY_HEIGHT": 9,
		"GET_BLOCK_WITH_TXRWSETS_BY_HASH":   10,
		"GET_LAST_BLOCK":                    11,
	}
)

func (x QueryFunction) Enum() *QueryFunction {
	p := new(QueryFunction)
	*p = x
	return p
}

func (x QueryFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (QueryFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[1].Descriptor()
}

func (QueryFunction) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[1]
}

func (x QueryFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use QueryFunction.Descriptor instead.
func (QueryFunction) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{1}
}

// smart contract runtime, contains vm type and language type
type RuntimeType int32

const (
	RuntimeType_INVALID RuntimeType = 0
	// native implement in chainmaker-go
	RuntimeType_NATIVE RuntimeType = 1
	// vm-wasmer, language-c++
	RuntimeType_WASMER RuntimeType = 2
	// vm-wxvm, language-cpp
	RuntimeType_WXVM RuntimeType = 3
	// wasm interpreter in go
	RuntimeType_GASM RuntimeType = 4
	// vm-evm
	RuntimeType_EVM RuntimeType = 5
	// vm-docker, language-golang
	RuntimeType_DOCKER_GO RuntimeType = 6
	// vm-docker, language-java
	RuntimeType_DOCKER_JAVA RuntimeType = 7
)

// Enum value maps for RuntimeType.
var (
	RuntimeType_name = map[int32]string{
		0: "INVALID",
		1: "NATIVE",
		2: "WASMER",
		3: "WXVM",
		4: "GASM",
		5: "EVM",
		6: "DOCKER_GO",
		7: "DOCKER_JAVA",
	}
	RuntimeType_value = map[string]int32{
		"INVALID":     0,
		"NATIVE":      1,
		"WASMER":      2,
		"WXVM":        3,
		"GASM":        4,
		"EVM":         5,
		"DOCKER_GO":   6,
		"DOCKER_JAVA": 7,
	}
)

func (x RuntimeType) Enum() *RuntimeType {
	p := new(RuntimeType)
	*p = x
	return p
}

func (x RuntimeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuntimeType) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[2].Descriptor()
}

func (RuntimeType) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[2]
}

func (x RuntimeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuntimeType.Descriptor instead.
func (RuntimeType) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{2}
}

type ConfigFunction int32

const (
	// get chain configuration
	ConfigFunction_GET_CHAIN_CONFIG ConfigFunction = 0
	// get the latest configuration block
	// the incoming blockheight must exist in the database
	// 如果传入的blockHeight是配置块，直接返回当前的配置信息
	ConfigFunction_GET_CHAIN_CONFIG_AT ConfigFunction = 1
	// update core
	ConfigFunction_CORE_UPDATE ConfigFunction = 2
	// update block
	ConfigFunction_BLOCK_UPDATE ConfigFunction = 3
	// add trusted certficate (org_id and root)
	ConfigFunction_TRUST_ROOT_ADD ConfigFunction = 4
	// [self] modify an individual's own trusted root certificate [org_id must exist in the original trust_roots,
	// and the new root certificate must be different from other certificates]
	ConfigFunction_TRUST_ROOT_UPDATE ConfigFunction = 5
	// delete trusted root certificate [org_ ID should be in trust_ The nodes in nodes need to be deleted]
	ConfigFunction_TRUST_ROOT_DELETE ConfigFunction = 6
	// organization add node address
	// org_id must already exist in nodes，you can add addresses in batches
	// the parameter is addresses. Single addresses are separated by ","
	// ip+port and peerid cannot be repeated
	// Deprecated , replace by NODE_ID_ADD
	ConfigFunction_NODE_ADDR_ADD ConfigFunction = 7
	// [self]the organization updates an address
	//[org_id and address must already exist in nodes, new_address is the new address. ip+port and peerId cannot be duplicated]
	// Deprecated , replace by NODE_ID_UPDATE
	ConfigFunction_NODE_ADDR_UPDATE ConfigFunction = 8
	// organization delete node address [org_id and address must already exist in nodes]
	// Deprecated , replace by NODE_ID_DELETE
	ConfigFunction_NODE_ADDR_DELETE ConfigFunction = 9
	// organization add node address in batches [org_id在nodes不存在，批量添加地址，参数为node_ids，单地址用逗号","隔开。nodeId不能重复]
	ConfigFunction_NODE_ORG_ADD ConfigFunction = 10
	// organization update
	// org_id must already exist in nodes，the parameter is addresses，Single addresses are separated by ","
	// ip+port and peerid cannot be repeated
	ConfigFunction_NODE_ORG_UPDATE ConfigFunction = 11
	// organization delete, org_id must already exist in nodes
	ConfigFunction_NODE_ORG_DELETE ConfigFunction = 12
	// add consensus parameters, key is not exit in ext_config
	ConfigFunction_CONSENSUS_EXT_ADD ConfigFunction = 13
	// update onsensus parameters, key exit in ext_config
	ConfigFunction_CONSENSUS_EXT_UPDATE ConfigFunction = 14
	// delete onsensus parameters, key exit in ext_config
	ConfigFunction_CONSENSUS_EXT_DELETE ConfigFunction = 15
	// add permission
	ConfigFunction_PERMISSION_ADD ConfigFunction = 16
	// update permission
	ConfigFunction_PERMISSION_UPDATE ConfigFunction = 17
	// delete permission
	ConfigFunction_PERMISSION_DELETE ConfigFunction = 18
	// organization add node_id
	// org_id must already exist in nodes，you can add node_id in batches
	// the parameter is node_ids. Single node_ids are separated by ","
	// node_id cannot be repeated
	ConfigFunction_NODE_ID_ADD ConfigFunction = 19
	// [self]the organization updates a node_ids
	//[org_id and node_ids must already exist in nodes, new_node_id is the new node_id. node_id cannot be duplicated]
	ConfigFunction_NODE_ID_UPDATE ConfigFunction = 20
	// organization delete node_id [org_id and node_id must already exist in nodes]
	ConfigFunction_NODE_ID_DELETE ConfigFunction = 21
)

// Enum value maps for ConfigFunction.
var (
	ConfigFunction_name = map[int32]string{
		0:  "GET_CHAIN_CONFIG",
		1:  "GET_CHAIN_CONFIG_AT",
		2:  "CORE_UPDATE",
		3:  "BLOCK_UPDATE",
		4:  "TRUST_ROOT_ADD",
		5:  "TRUST_ROOT_UPDATE",
		6:  "TRUST_ROOT_DELETE",
		7:  "NODE_ADDR_ADD",
		8:  "NODE_ADDR_UPDATE",
		9:  "NODE_ADDR_DELETE",
		10: "NODE_ORG_ADD",
		11: "NODE_ORG_UPDATE",
		12: "NODE_ORG_DELETE",
		13: "CONSENSUS_EXT_ADD",
		14: "CONSENSUS_EXT_UPDATE",
		15: "CONSENSUS_EXT_DELETE",
		16: "PERMISSION_ADD",
		17: "PERMISSION_UPDATE",
		18: "PERMISSION_DELETE",
		19: "NODE_ID_ADD",
		20: "NODE_ID_UPDATE",
		21: "NODE_ID_DELETE",
	}
	ConfigFunction_value = map[string]int32{
		"GET_CHAIN_CONFIG":     0,
		"GET_CHAIN_CONFIG_AT":  1,
		"CORE_UPDATE":          2,
		"BLOCK_UPDATE":         3,
		"TRUST_ROOT_ADD":       4,
		"TRUST_ROOT_UPDATE":    5,
		"TRUST_ROOT_DELETE":    6,
		"NODE_ADDR_ADD":        7,
		"NODE_ADDR_UPDATE":     8,
		"NODE_ADDR_DELETE":     9,
		"NODE_ORG_ADD":         10,
		"NODE_ORG_UPDATE":      11,
		"NODE_ORG_DELETE":      12,
		"CONSENSUS_EXT_ADD":    13,
		"CONSENSUS_EXT_UPDATE": 14,
		"CONSENSUS_EXT_DELETE": 15,
		"PERMISSION_ADD":       16,
		"PERMISSION_UPDATE":    17,
		"PERMISSION_DELETE":    18,
		"NODE_ID_ADD":          19,
		"NODE_ID_UPDATE":       20,
		"NODE_ID_DELETE":       21,
	}
)

func (x ConfigFunction) Enum() *ConfigFunction {
	p := new(ConfigFunction)
	*p = x
	return p
}

func (x ConfigFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[3].Descriptor()
}

func (ConfigFunction) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[3]
}

func (x ConfigFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigFunction.Descriptor instead.
func (ConfigFunction) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{3}
}

// Methods of certificate management
type CertManageFunction int32

const (
	// add certficate
	CertManageFunction_CERT_ADD CertManageFunction = 0
	// delete certficate
	CertManageFunction_CERTS_DELETE CertManageFunction = 1
	// query certficate
	CertManageFunction_CERTS_QUERY CertManageFunction = 2
	// freeze certificate
	CertManageFunction_CERTS_FREEZE CertManageFunction = 3
	// unfreezing certificate
	CertManageFunction_CERTS_UNFREEZE CertManageFunction = 4
	// Revocation of certificate
	CertManageFunction_CERTS_REVOKE CertManageFunction = 5
)

// Enum value maps for CertManageFunction.
var (
	CertManageFunction_name = map[int32]string{
		0: "CERT_ADD",
		1: "CERTS_DELETE",
		2: "CERTS_QUERY",
		3: "CERTS_FREEZE",
		4: "CERTS_UNFREEZE",
		5: "CERTS_REVOKE",
	}
	CertManageFunction_value = map[string]int32{
		"CERT_ADD":       0,
		"CERTS_DELETE":   1,
		"CERTS_QUERY":    2,
		"CERTS_FREEZE":   3,
		"CERTS_UNFREEZE": 4,
		"CERTS_REVOKE":   5,
	}
)

func (x CertManageFunction) Enum() *CertManageFunction {
	p := new(CertManageFunction)
	*p = x
	return p
}

func (x CertManageFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertManageFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[4].Descriptor()
}

func (CertManageFunction) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[4]
}

func (x CertManageFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertManageFunction.Descriptor instead.
func (CertManageFunction) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{4}
}

// methods of managing multi signature
type MultiSignFunction int32

const (
	// multi signature request
	MultiSignFunction_REQ MultiSignFunction = 0
	// multi signature voting
	MultiSignFunction_VOTE MultiSignFunction = 1
	// multi signature query
	MultiSignFunction_QUERY MultiSignFunction = 2
)

// Enum value maps for MultiSignFunction.
var (
	MultiSignFunction_name = map[int32]string{
		0: "REQ",
		1: "VOTE",
		2: "QUERY",
	}
	MultiSignFunction_value = map[string]int32{
		"REQ":   0,
		"VOTE":  1,
		"QUERY": 2,
	}
)

func (x MultiSignFunction) Enum() *MultiSignFunction {
	p := new(MultiSignFunction)
	*p = x
	return p
}

func (x MultiSignFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MultiSignFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[5].Descriptor()
}

func (MultiSignFunction) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[5]
}

func (x MultiSignFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MultiSignFunction.Descriptor instead.
func (MultiSignFunction) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{5}
}

// methods of user management contract
type ManageUserContractFunction int32

const (
	// init contract
	ManageUserContractFunction_INIT_CONTRACT ManageUserContractFunction = 0
	// upgrade contract
	ManageUserContractFunction_UPGRADE_CONTRACT ManageUserContractFunction = 1
	// freeze  contract
	ManageUserContractFunction_FREEZE_CONTRACT ManageUserContractFunction = 2
	// unfreezing contract
	ManageUserContractFunction_UNFREEZE_CONTRACT ManageUserContractFunction = 3
	// Revocation of contract
	ManageUserContractFunction_REVOKE_CONTRACT ManageUserContractFunction = 4
)

// Enum value maps for ManageUserContractFunction.
var (
	ManageUserContractFunction_name = map[int32]string{
		0: "INIT_CONTRACT",
		1: "UPGRADE_CONTRACT",
		2: "FREEZE_CONTRACT",
		3: "UNFREEZE_CONTRACT",
		4: "REVOKE_CONTRACT",
	}
	ManageUserContractFunction_value = map[string]int32{
		"INIT_CONTRACT":     0,
		"UPGRADE_CONTRACT":  1,
		"FREEZE_CONTRACT":   2,
		"UNFREEZE_CONTRACT": 3,
		"REVOKE_CONTRACT":   4,
	}
)

func (x ManageUserContractFunction) Enum() *ManageUserContractFunction {
	p := new(ManageUserContractFunction)
	*p = x
	return p
}

func (x ManageUserContractFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ManageUserContractFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[6].Descriptor()
}

func (ManageUserContractFunction) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[6]
}

func (x ManageUserContractFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ManageUserContractFunction.Descriptor instead.
func (ManageUserContractFunction) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{6}
}

// methods of private compute contract
type PrivateComputeContractFunction int32

const (
	// get contract code
	PrivateComputeContractFunction_GET_CONTRACT PrivateComputeContractFunction = 0
	// get private data
	PrivateComputeContractFunction_GET_DATA PrivateComputeContractFunction = 1
	// save cert of tee
	PrivateComputeContractFunction_SAVE_CERT PrivateComputeContractFunction = 2
	// save private data dir
	PrivateComputeContractFunction_SAVE_DIR PrivateComputeContractFunction = 3
	// save data of private computation result
	PrivateComputeContractFunction_SAVE_DATA PrivateComputeContractFunction = 4
	//save contract code
	PrivateComputeContractFunction_SAVE_CONTRACT PrivateComputeContractFunction = 5
	//save enclave quote
	PrivateComputeContractFunction_SAVE_QUOTE PrivateComputeContractFunction = 6
	//get enclave quote
	PrivateComputeContractFunction_GET_QUOTE PrivateComputeContractFunction = 7
	//get cert of tee
	PrivateComputeContractFunction_GET_CERT PrivateComputeContractFunction = 8
	//get private data dir
	PrivateComputeContractFunction_GET_DIR PrivateComputeContractFunction = 9
)

// Enum value maps for PrivateComputeContractFunction.
var (
	PrivateComputeContractFunction_name = map[int32]string{
		0: "GET_CONTRACT",
		1: "GET_DATA",
		2: "SAVE_CERT",
		3: "SAVE_DIR",
		4: "SAVE_DATA",
		5: "SAVE_CONTRACT",
		6: "SAVE_QUOTE",
		7: "GET_QUOTE",
		8: "GET_CERT",
		9: "GET_DIR",
	}
	PrivateComputeContractFunction_value = map[string]int32{
		"GET_CONTRACT":  0,
		"GET_DATA":      1,
		"SAVE_CERT":     2,
		"SAVE_DIR":      3,
		"SAVE_DATA":     4,
		"SAVE_CONTRACT": 5,
		"SAVE_QUOTE":    6,
		"GET_QUOTE":     7,
		"GET_CERT":      8,
		"GET_DIR":       9,
	}
)

func (x PrivateComputeContractFunction) Enum() *PrivateComputeContractFunction {
	p := new(PrivateComputeContractFunction)
	*p = x
	return p
}

func (x PrivateComputeContractFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrivateComputeContractFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[7].Descriptor()
}

func (PrivateComputeContractFunction) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[7]
}

func (x PrivateComputeContractFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrivateComputeContractFunction.Descriptor instead.
func (PrivateComputeContractFunction) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{7}
}

type DPoSERC20ContractFunction int32

const (
	// get owner of DPoS
	DPoSERC20ContractFunction_GET_OWNER DPoSERC20ContractFunction = 0
	// get decimals of DPoS
	DPoSERC20ContractFunction_GET_DECIMALS DPoSERC20ContractFunction = 1
	// transfer token at DPoS
	DPoSERC20ContractFunction_TRANSFER DPoSERC20ContractFunction = 2
	// transfer token from user at DPoS
	DPoSERC20ContractFunction_TRANSFER_FROM DPoSERC20ContractFunction = 3
	// get balance of user at DPoS
	DPoSERC20ContractFunction_GET_BALANCEOF DPoSERC20ContractFunction = 4
	// approve token for user to other user at DPoS
	DPoSERC20ContractFunction_APPROVE DPoSERC20ContractFunction = 5
	// get allowance at DPoS
	DPoSERC20ContractFunction_GET_ALLOWANCE DPoSERC20ContractFunction = 6
	// burn token at DPoS
	DPoSERC20ContractFunction_BURN DPoSERC20ContractFunction = 7
	// mint token at DPoS
	DPoSERC20ContractFunction_MINT DPoSERC20ContractFunction = 8
	// transfer owner ship at DPoS
	DPoSERC20ContractFunction_TRANSFER_OWNERSHIP DPoSERC20ContractFunction = 9
)

// Enum value maps for DPoSERC20ContractFunction.
var (
	DPoSERC20ContractFunction_name = map[int32]string{
		0: "GET_OWNER",
		1: "GET_DECIMALS",
		2: "TRANSFER",
		3: "TRANSFER_FROM",
		4: "GET_BALANCEOF",
		5: "APPROVE",
		6: "GET_ALLOWANCE",
		7: "BURN",
		8: "MINT",
		9: "TRANSFER_OWNERSHIP",
	}
	DPoSERC20ContractFunction_value = map[string]int32{
		"GET_OWNER":          0,
		"GET_DECIMALS":       1,
		"TRANSFER":           2,
		"TRANSFER_FROM":      3,
		"GET_BALANCEOF":      4,
		"APPROVE":            5,
		"GET_ALLOWANCE":      6,
		"BURN":               7,
		"MINT":               8,
		"TRANSFER_OWNERSHIP": 9,
	}
)

func (x DPoSERC20ContractFunction) Enum() *DPoSERC20ContractFunction {
	p := new(DPoSERC20ContractFunction)
	*p = x
	return p
}

func (x DPoSERC20ContractFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DPoSERC20ContractFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[8].Descriptor()
}

func (DPoSERC20ContractFunction) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[8]
}

func (x DPoSERC20ContractFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DPoSERC20ContractFunction.Descriptor instead.
func (DPoSERC20ContractFunction) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{8}
}

type DPoSStakeContractFunction int32

const (
	// get all validator
	DPoSStakeContractFunction_GET_ALL_VALIDATOR DPoSStakeContractFunction = 0
	// delegate
	DPoSStakeContractFunction_DELEGATE DPoSStakeContractFunction = 1
	// undelegate
	DPoSStakeContractFunction_UNDELEGATE DPoSStakeContractFunction = 2
	// read epoch by id
	DPoSStakeContractFunction_READ_EPOCH_BY_ID DPoSStakeContractFunction = 3
	// read latest epoch
	DPoSStakeContractFunction_READ_LATEST_EPOCH DPoSStakeContractFunction = 4
)

// Enum value maps for DPoSStakeContractFunction.
var (
	DPoSStakeContractFunction_name = map[int32]string{
		0: "GET_ALL_VALIDATOR",
		1: "DELEGATE",
		2: "UNDELEGATE",
		3: "READ_EPOCH_BY_ID",
		4: "READ_LATEST_EPOCH",
	}
	DPoSStakeContractFunction_value = map[string]int32{
		"GET_ALL_VALIDATOR": 0,
		"DELEGATE":          1,
		"UNDELEGATE":        2,
		"READ_EPOCH_BY_ID":  3,
		"READ_LATEST_EPOCH": 4,
	}
)

func (x DPoSStakeContractFunction) Enum() *DPoSStakeContractFunction {
	p := new(DPoSStakeContractFunction)
	*p = x
	return p
}

func (x DPoSStakeContractFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DPoSStakeContractFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[9].Descriptor()
}

func (DPoSStakeContractFunction) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[9]
}

func (x DPoSStakeContractFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DPoSStakeContractFunction.Descriptor instead.
func (DPoSStakeContractFunction) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{9}
}

type BondStatus int32

const (
	BondStatus_Bonded    BondStatus = 0
	BondStatus_Unbonding BondStatus = 1
	BondStatus_Unbonded  BondStatus = 2
)

// Enum value maps for BondStatus.
var (
	BondStatus_name = map[int32]string{
		0: "Bonded",
		1: "Unbonding",
		2: "Unbonded",
	}
	BondStatus_value = map[string]int32{
		"Bonded":    0,
		"Unbonding": 1,
		"Unbonded":  2,
	}
)

func (x BondStatus) Enum() *BondStatus {
	p := new(BondStatus)
	*p = x
	return p
}

func (x BondStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BondStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[10].Descriptor()
}

func (BondStatus) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[10]
}

func (x BondStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BondStatus.Descriptor instead.
func (BondStatus) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{10}
}

type StakePrefix int32

const (
	StakePrefix_Prefix_Validator                StakePrefix = 0
	StakePrefix_Prefix_Delegation               StakePrefix = 1
	StakePrefix_Prefix_Curr_Epoch               StakePrefix = 2
	StakePrefix_Prefix_Epoch_Record             StakePrefix = 3
	StakePrefix_Prefix_Unbond                   StakePrefix = 4
	StakePrefix_Prefix_MinSelfDelegation        StakePrefix = 5
	StakePrefix_Prefix_UnbondingDelegationQueue StakePrefix = 6
	StakePrefix_Prefix_EpochValidatorNumber     StakePrefix = 7
	StakePrefix_Prefix_EpochBlockNumber         StakePrefix = 8
)

// Enum value maps for StakePrefix.
var (
	StakePrefix_name = map[int32]string{
		0: "Prefix_Validator",
		1: "Prefix_Delegation",
		2: "Prefix_Curr_Epoch",
		3: "Prefix_Epoch_Record",
		4: "Prefix_Unbond",
		5: "Prefix_MinSelfDelegation",
		6: "Prefix_UnbondingDelegationQueue",
		7: "Prefix_EpochValidatorNumber",
		8: "Prefix_EpochBlockNumber",
	}
	StakePrefix_value = map[string]int32{
		"Prefix_Validator":                0,
		"Prefix_Delegation":               1,
		"Prefix_Curr_Epoch":               2,
		"Prefix_Epoch_Record":             3,
		"Prefix_Unbond":                   4,
		"Prefix_MinSelfDelegation":        5,
		"Prefix_UnbondingDelegationQueue": 6,
		"Prefix_EpochValidatorNumber":     7,
		"Prefix_EpochBlockNumber":         8,
	}
)

func (x StakePrefix) Enum() *StakePrefix {
	p := new(StakePrefix)
	*p = x
	return p
}

func (x StakePrefix) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StakePrefix) Descriptor() protoreflect.EnumDescriptor {
	return file_contract_proto_enumTypes[11].Descriptor()
}

func (StakePrefix) Type() protoreflect.EnumType {
	return &file_contract_proto_enumTypes[11]
}

func (x StakePrefix) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StakePrefix.Descriptor instead.
func (StakePrefix) EnumDescriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{11}
}

// the unique identifier of a smart contract
type ContractId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// smart contract name, set by contract creator, can have multiple versions
	ContractName string `protobuf:"bytes,1,opt,name=contract_name,json=contractName,proto3" json:"contract_name,omitempty"`
	// smart contract version, set by contract creator, name + version should be unique
	ContractVersion string `protobuf:"bytes,2,opt,name=contract_version,json=contractVersion,proto3" json:"contract_version,omitempty"`
	// smart contract runtime type, set by contract creator
	RuntimeType RuntimeType `protobuf:"varint,3,opt,name=runtime_type,json=runtimeType,proto3,enum=common.RuntimeType" json:"runtime_type,omitempty"`
}

func (x *ContractId) Reset() {
	*x = ContractId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractId) ProtoMessage() {}

func (x *ContractId) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractId.ProtoReflect.Descriptor instead.
func (*ContractId) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{0}
}

func (x *ContractId) GetContractName() string {
	if x != nil {
		return x.ContractName
	}
	return ""
}

func (x *ContractId) GetContractVersion() string {
	if x != nil {
		return x.ContractVersion
	}
	return ""
}

func (x *ContractId) GetRuntimeType() RuntimeType {
	if x != nil {
		return x.RuntimeType
	}
	return RuntimeType_INVALID
}

type ContractInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractTransaction []*ContractTransaction `protobuf:"bytes,1,rep,name=contract_transaction,json=contractTransaction,proto3" json:"contract_transaction,omitempty"`
}

func (x *ContractInfo) Reset() {
	*x = ContractInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractInfo) ProtoMessage() {}

func (x *ContractInfo) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractInfo.ProtoReflect.Descriptor instead.
func (*ContractInfo) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{1}
}

func (x *ContractInfo) GetContractTransaction() []*ContractTransaction {
	if x != nil {
		return x.ContractTransaction
	}
	return nil
}

type ContractTransaction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ContractId *ContractId `protobuf:"bytes,1,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	TxId       string      `protobuf:"bytes,2,opt,name=tx_id,json=txId,proto3" json:"tx_id,omitempty"`
}

func (x *ContractTransaction) Reset() {
	*x = ContractTransaction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContractTransaction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContractTransaction) ProtoMessage() {}

func (x *ContractTransaction) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContractTransaction.ProtoReflect.Descriptor instead.
func (*ContractTransaction) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{2}
}

func (x *ContractTransaction) GetContractId() *ContractId {
	if x != nil {
		return x.ContractId
	}
	return nil
}

func (x *ContractTransaction) GetTxId() string {
	if x != nil {
		return x.TxId
	}
	return ""
}

type Epoch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EpochID               uint64   `protobuf:"varint,1,opt,name=EpochID,proto3" json:"EpochID,omitempty"`                             // ID with auto-increment
	ProposerVector        []string `protobuf:"bytes,2,rep,name=ProposerVector,proto3" json:"ProposerVector,omitempty"`                // A collection of validators for the current generation
	NextEpochCreateHeight uint64   `protobuf:"varint,3,opt,name=NextEpochCreateHeight,proto3" json:"NextEpochCreateHeight,omitempty"` // Next epoch switch height
}

func (x *Epoch) Reset() {
	*x = Epoch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Epoch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Epoch) ProtoMessage() {}

func (x *Epoch) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Epoch.ProtoReflect.Descriptor instead.
func (*Epoch) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{3}
}

func (x *Epoch) GetEpochID() uint64 {
	if x != nil {
		return x.EpochID
	}
	return 0
}

func (x *Epoch) GetProposerVector() []string {
	if x != nil {
		return x.ProposerVector
	}
	return nil
}

func (x *Epoch) GetNextEpochCreateHeight() uint64 {
	if x != nil {
		return x.NextEpochCreateHeight
	}
	return 0
}

type Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ValidatorAddress           string     `protobuf:"bytes,1,opt,name=ValidatorAddress,proto3" json:"ValidatorAddress,omitempty"`                      // The address of the verifier: base58.Encode(sha256(pubkey))
	Jailed                     bool       `protobuf:"varint,2,opt,name=Jailed,proto3" json:"Jailed,omitempty"`                                         // 活性惩罚后是否被移除验证人集合的标记
	Status                     BondStatus `protobuf:"varint,3,opt,name=Status,proto3,enum=common.BondStatus" json:"Status,omitempty"`                  // 验证人状态包含 Bonded / Unbonding / Unbonded
	Tokens                     string     `protobuf:"bytes,4,opt,name=Tokens,proto3" json:"Tokens,omitempty"`                                          // 抵押的 token 数量
	DelegatorShares            string     `protobuf:"bytes,5,opt,name=DelegatorShares,proto3" json:"DelegatorShares,omitempty"`                        // 抵押物的股权总计
	UnbondingEpochID           uint64     `protobuf:"varint,6,opt,name=UnbondingEpochID,proto3" json:"UnbondingEpochID,omitempty"`                     // 发起解除质押物交易的 Epoch
	UnbondingCompletionEpochID uint64     `protobuf:"varint,7,opt,name=UnbondingCompletionEpochID,proto3" json:"UnbondingCompletionEpochID,omitempty"` // 解除质押 Epoch
	SelfDelegation             string     `protobuf:"bytes,8,opt,name=SelfDelegation,proto3" json:"SelfDelegation,omitempty"`                          // 自抵押 token 数
}

func (x *Validator) Reset() {
	*x = Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Validator) ProtoMessage() {}

func (x *Validator) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Validator.ProtoReflect.Descriptor instead.
func (*Validator) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{4}
}

func (x *Validator) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *Validator) GetJailed() bool {
	if x != nil {
		return x.Jailed
	}
	return false
}

func (x *Validator) GetStatus() BondStatus {
	if x != nil {
		return x.Status
	}
	return BondStatus_Bonded
}

func (x *Validator) GetTokens() string {
	if x != nil {
		return x.Tokens
	}
	return ""
}

func (x *Validator) GetDelegatorShares() string {
	if x != nil {
		return x.DelegatorShares
	}
	return ""
}

func (x *Validator) GetUnbondingEpochID() uint64 {
	if x != nil {
		return x.UnbondingEpochID
	}
	return 0
}

func (x *Validator) GetUnbondingCompletionEpochID() uint64 {
	if x != nil {
		return x.UnbondingCompletionEpochID
	}
	return 0
}

func (x *Validator) GetSelfDelegation() string {
	if x != nil {
		return x.SelfDelegation
	}
	return ""
}

type Delegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatorAddress string `protobuf:"bytes,1,opt,name=DelegatorAddress,proto3" json:"DelegatorAddress,omitempty"` //抵押人的ID
	ValidatorAddress string `protobuf:"bytes,2,opt,name=ValidatorAddress,proto3" json:"ValidatorAddress,omitempty"` //验证人的ID
	Shares           string `protobuf:"bytes,3,opt,name=Shares,proto3" json:"Shares,omitempty"`                     //抵押股权
}

func (x *Delegation) Reset() {
	*x = Delegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Delegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Delegation) ProtoMessage() {}

func (x *Delegation) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Delegation.ProtoReflect.Descriptor instead.
func (*Delegation) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{5}
}

func (x *Delegation) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

func (x *Delegation) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *Delegation) GetShares() string {
	if x != nil {
		return x.Shares
	}
	return ""
}

type UnbondingDelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DelegatorAddress string                      `protobuf:"bytes,1,opt,name=DelegatorAddress,proto3" json:"DelegatorAddress,omitempty"` // 抵押人ID
	ValidatorAddress string                      `protobuf:"bytes,2,opt,name=ValidatorAddress,proto3" json:"ValidatorAddress,omitempty"` // 验证人ID
	Entries          []*UnbondingDelegationEntry `protobuf:"bytes,3,rep,name=Entries,proto3" json:"Entries,omitempty"`                   // Unbond 记录
}

func (x *UnbondingDelegation) Reset() {
	*x = UnbondingDelegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbondingDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbondingDelegation) ProtoMessage() {}

func (x *UnbondingDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbondingDelegation.ProtoReflect.Descriptor instead.
func (*UnbondingDelegation) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{6}
}

func (x *UnbondingDelegation) GetDelegatorAddress() string {
	if x != nil {
		return x.DelegatorAddress
	}
	return ""
}

func (x *UnbondingDelegation) GetValidatorAddress() string {
	if x != nil {
		return x.ValidatorAddress
	}
	return ""
}

func (x *UnbondingDelegation) GetEntries() []*UnbondingDelegationEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

type UnbondingDelegationEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreationEpochID   uint64 `protobuf:"varint,1,opt,name=CreationEpochID,proto3" json:"CreationEpochID,omitempty"`     // 创建 Epoch 高度
	UnbondedEpochID   uint64 `protobuf:"varint,2,opt,name=UnbondedEpochID,proto3" json:"UnbondedEpochID,omitempty"`     // 退出 Epoch 高度
	CompletionEpochID uint64 `protobuf:"varint,3,opt,name=CompletionEpochID,proto3" json:"CompletionEpochID,omitempty"` // 完成Epoch高度
	InitialBalance    string `protobuf:"bytes,4,opt,name=InitialBalance,proto3" json:"InitialBalance,omitempty"`        // 解抵押初始金额
	Balance           string `protobuf:"bytes,5,opt,name=Balance,proto3" json:"Balance,omitempty"`                      // 解抵押后余额
}

func (x *UnbondingDelegationEntry) Reset() {
	*x = UnbondingDelegationEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbondingDelegationEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbondingDelegationEntry) ProtoMessage() {}

func (x *UnbondingDelegationEntry) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbondingDelegationEntry.ProtoReflect.Descriptor instead.
func (*UnbondingDelegationEntry) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{7}
}

func (x *UnbondingDelegationEntry) GetCreationEpochID() uint64 {
	if x != nil {
		return x.CreationEpochID
	}
	return 0
}

func (x *UnbondingDelegationEntry) GetUnbondedEpochID() uint64 {
	if x != nil {
		return x.UnbondedEpochID
	}
	return 0
}

func (x *UnbondingDelegationEntry) GetCompletionEpochID() uint64 {
	if x != nil {
		return x.CompletionEpochID
	}
	return 0
}

func (x *UnbondingDelegationEntry) GetInitialBalance() string {
	if x != nil {
		return x.InitialBalance
	}
	return ""
}

func (x *UnbondingDelegationEntry) GetBalance() string {
	if x != nil {
		return x.Balance
	}
	return ""
}

type UnbondingDelegationQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Queue []*UnbondingDelegation `protobuf:"bytes,1,rep,name=Queue,proto3" json:"Queue,omitempty"` // Unbond 队列 顺序执行 Unbond 操作，FIFO
}

func (x *UnbondingDelegationQueue) Reset() {
	*x = UnbondingDelegationQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnbondingDelegationQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnbondingDelegationQueue) ProtoMessage() {}

func (x *UnbondingDelegationQueue) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnbondingDelegationQueue.ProtoReflect.Descriptor instead.
func (*UnbondingDelegationQueue) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{8}
}

func (x *UnbondingDelegationQueue) GetQueue() []*UnbondingDelegation {
	if x != nil {
		return x.Queue
	}
	return nil
}

type ValidatorVector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Vector []string `protobuf:"bytes,1,rep,name=vector,proto3" json:"vector,omitempty"` // 验证人数组
}

func (x *ValidatorVector) Reset() {
	*x = ValidatorVector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_contract_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidatorVector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidatorVector) ProtoMessage() {}

func (x *ValidatorVector) ProtoReflect() protoreflect.Message {
	mi := &file_contract_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidatorVector.ProtoReflect.Descriptor instead.
func (*ValidatorVector) Descriptor() ([]byte, []int) {
	return file_contract_proto_rawDescGZIP(), []int{9}
}

func (x *ValidatorVector) GetVector() []string {
	if x != nil {
		return x.Vector
	}
	return nil
}

var File_contract_proto protoreflect.FileDescriptor

var file_contract_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x22, 0x94, 0x01, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x72, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x5e, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4e, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x5f, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x52,
	0x0a, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x49, 0x64, 0x12, 0x13, 0x0a, 0x05, 0x74,
	0x78, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x78, 0x49, 0x64,
	0x22, 0x7f, 0x0a, 0x05, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x70, 0x6f,
	0x63, 0x68, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x45, 0x70, 0x6f, 0x63,
	0x68, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x72, 0x56,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x72, 0x56, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x34, 0x0a, 0x15, 0x4e,
	0x65, 0x78, 0x74, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x4e, 0x65, 0x78, 0x74,
	0x45, 0x70, 0x6f, 0x63, 0x68, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x48, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x22, 0xd1, 0x02, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x2a, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4a,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4a, 0x61, 0x69,
	0x6c, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x42, 0x6f, 0x6e,
	0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x73, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x55, 0x6e, 0x62,
	0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x44, 0x12, 0x3e, 0x0a,
	0x1a, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x1a, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x44, 0x12, 0x26, 0x0a,
	0x0e, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x7c, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x2a, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x73, 0x22, 0xa9, 0x01, 0x0a, 0x13, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e,
	0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x44,
	0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x6f, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x3a, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x55, 0x6e,
	0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x22,
	0xde, 0x01, 0x0a, 0x18, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x0f,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45,
	0x70, 0x6f, 0x63, 0x68, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64,
	0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0f, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x44,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70,
	0x6f, 0x63, 0x68, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x11, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x49, 0x44, 0x12, 0x26,
	0x0a, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x49, 0x6e, 0x69, 0x74, 0x69, 0x61, 0x6c, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65,
	0x22, 0x4d, 0x0a, 0x18, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x31, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x75, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x51, 0x75, 0x65, 0x75, 0x65, 0x22,
	0x29, 0x0a, 0x0f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x56, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x06, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2a, 0xac, 0x02, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x43,
	0x48, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x43, 0x45, 0x52, 0x54,
	0x5f, 0x4d, 0x41, 0x4e, 0x41, 0x47, 0x45, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x47, 0x4f, 0x56,
	0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x03, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x45, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x5f, 0x43,
	0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f,
	0x43, 0x4f, 0x4d, 0x50, 0x55, 0x54, 0x45, 0x10, 0x06, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x50, 0x4f,
	0x53, 0x5f, 0x45, 0x52, 0x43, 0x32, 0x30, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x59, 0x53,
	0x54, 0x45, 0x4d, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x44, 0x50, 0x4f,
	0x53, 0x5f, 0x53, 0x54, 0x41, 0x4b, 0x45, 0x10, 0x08, 0x2a, 0xc8, 0x02, 0x0a, 0x0d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x12, 0x47,
	0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x58, 0x5f, 0x49,
	0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52,
	0x41, 0x43, 0x54, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x45,
	0x54, 0x5f, 0x54, 0x58, 0x5f, 0x42, 0x59, 0x5f, 0x54, 0x58, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x12,
	0x17, 0x0a, 0x13, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f,
	0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15,
	0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f,
	0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f, 0x42,
	0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x06, 0x12, 0x17,
	0x0a, 0x13, 0x47, 0x45, 0x54, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x07, 0x12, 0x1b, 0x0a, 0x17, 0x47, 0x45, 0x54, 0x5f, 0x47,
	0x4f, 0x56, 0x45, 0x52, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41,
	0x43, 0x54, 0x10, 0x08, 0x12, 0x25, 0x0a, 0x21, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x58, 0x52, 0x57, 0x53, 0x45, 0x54, 0x53, 0x5f,
	0x42, 0x59, 0x5f, 0x48, 0x45, 0x49, 0x47, 0x48, 0x54, 0x10, 0x09, 0x12, 0x23, 0x0a, 0x1f, 0x47,
	0x45, 0x54, 0x5f, 0x42, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x54, 0x58,
	0x52, 0x57, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x42, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10, 0x0a,
	0x12, 0x12, 0x0a, 0x0e, 0x47, 0x45, 0x54, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x42, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x0b, 0x2a, 0x6f, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x41, 0x54, 0x49, 0x56, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06,
	0x57, 0x41, 0x53, 0x4d, 0x45, 0x52, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x58, 0x56, 0x4d,
	0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x47, 0x41, 0x53, 0x4d, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03,
	0x45, 0x56, 0x4d, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f,
	0x47, 0x4f, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x4f, 0x43, 0x4b, 0x45, 0x52, 0x5f, 0x4a,
	0x41, 0x56, 0x41, 0x10, 0x07, 0x2a, 0xe5, 0x03, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x54, 0x5f,
	0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x10, 0x00, 0x12, 0x17,
	0x0a, 0x13, 0x47, 0x45, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x46,
	0x49, 0x47, 0x5f, 0x41, 0x54, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x52, 0x45, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4c, 0x4f, 0x43,
	0x4b, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52,
	0x55, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x04, 0x12, 0x15,
	0x0a, 0x11, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x54, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x52, 0x55, 0x53, 0x54, 0x5f, 0x52,
	0x4f, 0x4f, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x07, 0x12,
	0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x5f, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x41, 0x44,
	0x44, 0x52, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x09, 0x12, 0x10, 0x0a, 0x0c, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x0a, 0x12, 0x13, 0x0a,
	0x0f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x0b, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x4f, 0x52, 0x47, 0x5f, 0x44,
	0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f, 0x4e, 0x53, 0x45,
	0x4e, 0x53, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x0d, 0x12, 0x18,
	0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x5f,
	0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x4f, 0x4e, 0x53,
	0x45, 0x4e, 0x53, 0x55, 0x53, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45,
	0x10, 0x0f, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x41, 0x44, 0x44, 0x10, 0x10, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x11, 0x12, 0x15, 0x0a,
	0x11, 0x50, 0x45, 0x52, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x5f,
	0x41, 0x44, 0x44, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44,
	0x5f, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x14, 0x12, 0x12, 0x0a, 0x0e, 0x4e, 0x4f, 0x44,
	0x45, 0x5f, 0x49, 0x44, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x15, 0x2a, 0x7d, 0x0a,
	0x12, 0x43, 0x65, 0x72, 0x74, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x45, 0x52, 0x54, 0x5f, 0x41, 0x44, 0x44, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45, 0x52, 0x54, 0x53, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x45, 0x52, 0x54, 0x53, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45, 0x52, 0x54, 0x53, 0x5f, 0x46, 0x52,
	0x45, 0x45, 0x5a, 0x45, 0x10, 0x03, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x45, 0x52, 0x54, 0x53, 0x5f,
	0x55, 0x4e, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x45,
	0x52, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x10, 0x05, 0x2a, 0x31, 0x0a, 0x11,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x45, 0x51, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f,
	0x54, 0x45, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x51, 0x55, 0x45, 0x52, 0x59, 0x10, 0x02, 0x2a,
	0x86, 0x01, 0x0a, 0x1a, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x11,
	0x0a, 0x0d, 0x49, 0x4e, 0x49, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10,
	0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x50, 0x47, 0x52, 0x41, 0x44, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x45, 0x45, 0x5a,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x55, 0x4e, 0x46, 0x52, 0x45, 0x45, 0x5a, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43,
	0x54, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x56, 0x4f, 0x4b, 0x45, 0x5f, 0x43, 0x4f,
	0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x04, 0x2a, 0xb9, 0x01, 0x0a, 0x1e, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x47,
	0x45, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x41, 0x56, 0x45, 0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x41,
	0x56, 0x45, 0x5f, 0x44, 0x49, 0x52, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x56, 0x45,
	0x5f, 0x44, 0x41, 0x54, 0x41, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x41, 0x56, 0x45, 0x5f,
	0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x41,
	0x56, 0x45, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45,
	0x54, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45, 0x54,
	0x5f, 0x43, 0x45, 0x52, 0x54, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x54, 0x5f, 0x44,
	0x49, 0x52, 0x10, 0x09, 0x2a, 0xbc, 0x01, 0x0a, 0x19, 0x44, 0x50, 0x6f, 0x53, 0x45, 0x52, 0x43,
	0x32, 0x30, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x0d, 0x0a, 0x09, 0x47, 0x45, 0x54, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c,
	0x53, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x10,
	0x02, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x54, 0x5f, 0x42, 0x41, 0x4c, 0x41,
	0x4e, 0x43, 0x45, 0x4f, 0x46, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x50, 0x50, 0x52, 0x4f,
	0x56, 0x45, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x4f,
	0x57, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x06, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x55, 0x52, 0x4e, 0x10,
	0x07, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x49, 0x4e, 0x54, 0x10, 0x08, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52, 0x5f, 0x4f, 0x57, 0x4e, 0x45, 0x52, 0x53, 0x48, 0x49,
	0x50, 0x10, 0x09, 0x2a, 0x7d, 0x0a, 0x19, 0x44, 0x50, 0x6f, 0x53, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x15, 0x0a, 0x11, 0x47, 0x45, 0x54, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x56, 0x41, 0x4c, 0x49,
	0x44, 0x41, 0x54, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x4c, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x55, 0x4e, 0x44, 0x45, 0x4c, 0x45, 0x47,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x41, 0x44, 0x5f, 0x45, 0x50,
	0x4f, 0x43, 0x48, 0x5f, 0x42, 0x59, 0x5f, 0x49, 0x44, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x52,
	0x45, 0x41, 0x44, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f, 0x45, 0x50, 0x4f, 0x43, 0x48,
	0x10, 0x04, 0x2a, 0x35, 0x0a, 0x0a, 0x42, 0x6f, 0x6e, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x55,
	0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x65, 0x64, 0x10, 0x02, 0x2a, 0xfe, 0x01, 0x0a, 0x0b, 0x53, 0x74,
	0x61, 0x6b, 0x65, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x10, 0x00, 0x12,
	0x15, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x43, 0x75, 0x72, 0x72, 0x5f, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x5f, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78,
	0x5f, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x50, 0x72, 0x65,
	0x66, 0x69, 0x78, 0x5f, 0x4d, 0x69, 0x6e, 0x53, 0x65, 0x6c, 0x66, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x05, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x5f, 0x55, 0x6e, 0x62, 0x6f, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x10, 0x06, 0x12, 0x1f, 0x0a, 0x1b,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x07, 0x12, 0x1b, 0x0a,
	0x17, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x5f, 0x45, 0x70, 0x6f, 0x63, 0x68, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x10, 0x08, 0x42, 0x4a, 0x0a, 0x18, 0x6f, 0x72,
	0x67, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65, 0x72, 0x2e, 0x70, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5a, 0x2e, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b,
	0x65, 0x72, 0x2e, 0x6f, 0x72, 0x67, 0x2f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x6d, 0x61, 0x6b, 0x65,
	0x72, 0x2d, 0x67, 0x6f, 0x2f, 0x70, 0x62, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x67, 0x6f, 0x2f,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_contract_proto_rawDescOnce sync.Once
	file_contract_proto_rawDescData = file_contract_proto_rawDesc
)

func file_contract_proto_rawDescGZIP() []byte {
	file_contract_proto_rawDescOnce.Do(func() {
		file_contract_proto_rawDescData = protoimpl.X.CompressGZIP(file_contract_proto_rawDescData)
	})
	return file_contract_proto_rawDescData
}

var file_contract_proto_enumTypes = make([]protoimpl.EnumInfo, 12)
var file_contract_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_contract_proto_goTypes = []interface{}{
	(ContractName)(0),                   // 0: common.ContractName
	(QueryFunction)(0),                  // 1: common.QueryFunction
	(RuntimeType)(0),                    // 2: common.RuntimeType
	(ConfigFunction)(0),                 // 3: common.ConfigFunction
	(CertManageFunction)(0),             // 4: common.CertManageFunction
	(MultiSignFunction)(0),              // 5: common.MultiSignFunction
	(ManageUserContractFunction)(0),     // 6: common.ManageUserContractFunction
	(PrivateComputeContractFunction)(0), // 7: common.PrivateComputeContractFunction
	(DPoSERC20ContractFunction)(0),      // 8: common.DPoSERC20ContractFunction
	(DPoSStakeContractFunction)(0),      // 9: common.DPoSStakeContractFunction
	(BondStatus)(0),                     // 10: common.BondStatus
	(StakePrefix)(0),                    // 11: common.StakePrefix
	(*ContractId)(nil),                  // 12: common.ContractId
	(*ContractInfo)(nil),                // 13: common.ContractInfo
	(*ContractTransaction)(nil),         // 14: common.ContractTransaction
	(*Epoch)(nil),                       // 15: common.Epoch
	(*Validator)(nil),                   // 16: common.validator
	(*Delegation)(nil),                  // 17: common.delegation
	(*UnbondingDelegation)(nil),         // 18: common.unbondingDelegation
	(*UnbondingDelegationEntry)(nil),    // 19: common.UnbondingDelegationEntry
	(*UnbondingDelegationQueue)(nil),    // 20: common.unbondingDelegationQueue
	(*ValidatorVector)(nil),             // 21: common.validatorVector
}
var file_contract_proto_depIdxs = []int32{
	2,  // 0: common.ContractId.runtime_type:type_name -> common.RuntimeType
	14, // 1: common.ContractInfo.contract_transaction:type_name -> common.ContractTransaction
	12, // 2: common.ContractTransaction.contract_id:type_name -> common.ContractId
	10, // 3: common.validator.Status:type_name -> common.BondStatus
	19, // 4: common.unbondingDelegation.Entries:type_name -> common.UnbondingDelegationEntry
	18, // 5: common.unbondingDelegationQueue.Queue:type_name -> common.unbondingDelegation
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_contract_proto_init() }
func file_contract_proto_init() {
	if File_contract_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_contract_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContractTransaction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Epoch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Delegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbondingDelegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbondingDelegationEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnbondingDelegationQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_contract_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidatorVector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_contract_proto_rawDesc,
			NumEnums:      12,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_contract_proto_goTypes,
		DependencyIndexes: file_contract_proto_depIdxs,
		EnumInfos:         file_contract_proto_enumTypes,
		MessageInfos:      file_contract_proto_msgTypes,
	}.Build()
	File_contract_proto = out.File
	file_contract_proto_rawDesc = nil
	file_contract_proto_goTypes = nil
	file_contract_proto_depIdxs = nil
}
