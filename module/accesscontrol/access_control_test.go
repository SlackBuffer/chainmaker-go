/*
Copyright (C) BABEC. All rights reserved.
Copyright (C) THL A29 Limited, a Tencent company. All rights reserved.

SPDX-License-Identifier: Apache-2.0
*/

package accesscontrol

import (
	"chainmaker.org/chainmaker/pb-go/syscontract"
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"testing"
	"time"

	"chainmaker.org/chainmaker-go/localconf"
	logger2 "chainmaker.org/chainmaker-go/logger"
	bccrypto "chainmaker.org/chainmaker/common/crypto"
	pbac "chainmaker.org/chainmaker/pb-go/accesscontrol"
	"chainmaker.org/chainmaker/pb-go/common"
	"chainmaker.org/chainmaker/pb-go/config"
	"chainmaker.org/chainmaker/protocol"
	//"chainmaker.org/chainmaker-go/utils"
	"github.com/stretchr/testify/require"
)

const (
	chainId1 = "chain1"
	version  = "v1.0.0"
	org1Name = "wx-org1.chainmaker.org"
	org2Name = "wx-org2.chainmaker.org"
	org3Name = "wx-org3.chainmaker.org"
	org4Name = "wx-org4.chainmaker.org"
	org5Name = "wx-org5.chainmaker.org"

	msg = "Winter is coming."

	tempOrg1KeyFileName  = "org1.key"
	tempOrg1CertFileName = "org1.crt"
)

var chainConf = &config.ChainConfig{
	ChainId:  chainId1,
	Version:  version,
	AuthType: string(IdentityMode),
	Sequence: 0,
	Crypto: &config.CryptoConfig{
		Hash: bccrypto.CRYPTO_ALGO_SHA256,
	},
	Block: nil,
	Core:  nil,
	Consensus: &config.ConsensusConfig{
		Type: 0,
		Nodes: []*config.OrgConfig{{
			OrgId:  org1Name,
			NodeId: nil,
		}, {
			OrgId:  org2Name,
			NodeId: nil,
		}, {
			OrgId:  org3Name,
			NodeId: nil,
		}, {
			OrgId:  org4Name,
			NodeId: nil,
		},
		},
		ExtConfig: nil,
	},
	TrustRoots: []*config.TrustRootConfig{{
		OrgId: org1Name,
		Root: `-----BEGIN CERTIFICATE-----
MIICrzCCAlWgAwIBAgIDBvFVMAoGCCqBHM9VAYN1MIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMS5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmcxLmNoYWlubWFrZXIub3JnMB4XDTIwMTEwNTEzNTgzMloXDTMw
MTEwMzEzNTgzMlowgYoxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcxLmNoYWlubWFrZXIub3Jn
MRIwEAYDVQQLEwlyb290LWNlcnQxIjAgBgNVBAMTGWNhLnd4LW9yZzEuY2hhaW5t
YWtlci5vcmcwWTATBgcqhkjOPQIBBggqgRzPVQGCLQNCAAT5p2vEOPuZjdCdAI0Q
7nEshxZ/byAGcToOC169b4VLm6v9S3B8mbN7Sog5MziBxdF1EdFMckRAUX4i7yny
QD3vo4GnMIGkMA4GA1UdDwEB/wQEAwIBpjAPBgNVHSUECDAGBgRVHSUAMA8GA1Ud
EwEB/wQFMAMBAf8wKQYDVR0OBCIEIMy1iqk30srjLN8UU6qlDfROdgjxBNd5XPm7
RM7tAkgqMEUGA1UdEQQ+MDyCDmNoYWlubWFrZXIub3Jngglsb2NhbGhvc3SCGWNh
Lnd4LW9yZzEuY2hhaW5tYWtlci5vcmeHBH8AAAEwCgYIKoEcz1UBg3UDSAAwRQIh
ALJPwK8aITAoB9eqteDvIJMseVvfoicf0i45HpXyCu1yAiAhTOxEdbff5wWc0bpU
H21IT9MwfYYwwRVs4GPJs8b6SA==
-----END CERTIFICATE-----`,
	}, {
		OrgId: org2Name,
		Root: `-----BEGIN CERTIFICATE-----
MIIDNjCCAp+gAwIBAgIDDGDkMA0GCSqGSIb3DQEBCwUAMIGKMQswCQYDVQQGEwJD
TjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMW
d3gtb3JnMi5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYD
VQQDExljYS53eC1vcmcyLmNoYWlubWFrZXIub3JnMB4XDTIxMDEwNDA2NDIzMFoX
DTMxMDEwMjA2NDIzMFowgYoxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5n
MRAwDgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcyLmNoYWlubWFrZXIu
b3JnMRIwEAYDVQQLEwlyb290LWNlcnQxIjAgBgNVBAMTGWNhLnd4LW9yZzIuY2hh
aW5tYWtlci5vcmcwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAMHZzF1Cypt6
h/8H8vLsTDehz8aorjvD9b1ogl+PekutkitpqvZ1xOVRYtHEuV7xz7l6UNFXfZAl
HqNqBMaHgNOlzvK0veJczA4WxlijwHboepV0jWik8Lt238nf+XXvd20b7izMU+ql
4140r8N7zIuMH18s9VZ3wQrAtKqyKWDZAgMBAAGjgacwgaQwDgYDVR0PAQH/BAQD
AgGmMA8GA1UdJQQIMAYGBFUdJQAwDwYDVR0TAQH/BAUwAwEB/zApBgNVHQ4EIgQg
GPYmX1ph7/u1uM4l+HQQMxq8bOiHegfHURcS4Q41EGkwRQYDVR0RBD4wPIIOY2hh
aW5tYWtlci5vcmeCCWxvY2FsaG9zdIIZY2Eud3gtb3JnMi5jaGFpbm1ha2VyLm9y
Z4cEfwAAATANBgkqhkiG9w0BAQsFAAOBgQACQOUt+6ieNRoNc/OSQfTNhqHNxGdD
nOc31d+l22FIXlSTU30wZL17LBfbUx4RwQRyb47/cmW2sEObruaUctSqmNPVhRKw
RGPDFB+P/ddgWt/9D7sePcf5w4Oyg4AC6kw+tplBRXYmmC6X38b6efFj4nYXfOJY
6ifI2ntkrq/x7g==
-----END CERTIFICATE-----
`,
	}, {
		OrgId: org3Name,
		Root: `-----BEGIN CERTIFICATE-----
MIICrzCCAlWgAwIBAgIDDs8LMAoGCCqGSM49BAMCMIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMy5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmczLmNoYWlubWFrZXIub3JnMB4XDTIwMTExMDExMzM1NFoXDTMw
MTEwODExMzM1NFowgYoxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmczLmNoYWlubWFrZXIub3Jn
MRIwEAYDVQQLEwlyb290LWNlcnQxIjAgBgNVBAMTGWNhLnd4LW9yZzMuY2hhaW5t
YWtlci5vcmcwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAAQZsi2bVv0ruOlHAj91
03BYgN89UR9GIz9nZWVw9WHOGXJd0044RrTDEfxg+q7J1Ja7LKlP3Ctq7UTURxwE
Yz3Eo4GnMIGkMA4GA1UdDwEB/wQEAwIBpjAPBgNVHSUECDAGBgRVHSUAMA8GA1Ud
EwEB/wQFMAMBAf8wKQYDVR0OBCIEIGVfUgYx6693McTZLrNi/RMH96ifDF8kgoUU
muT0MvwbMEUGA1UdEQQ+MDyCDmNoYWlubWFrZXIub3Jngglsb2NhbGhvc3SCGWNh
Lnd4LW9yZzMuY2hhaW5tYWtlci5vcmeHBH8AAAEwCgYIKoZIzj0EAwIDSAAwRQIg
bG6xa3SfvAch59bJEZJGVKCM3wymF5VbD4L8cN/dgv0CIQDpzkrjmBFH4VQgfJh4
YzUnploBJu4BSJZWYAeaFAXaig==
-----END CERTIFICATE-----`,
	}, {
		OrgId: org4Name,
		Root: `-----BEGIN CERTIFICATE-----
MIICQzCCAemgAwIBAgIJAM+7uyWU8O6XMAoGCCqGSM49BAMCMGUxCzAJBgNVBAYT
AkNOMRAwDgYDVQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdIYWlkaWFuMRMwEQYDVQQK
DApDaGFpbk1ha2VyMQswCQYDVQQLDAJjYTEQMA4GA1UEAwwHUm9vdCBDQTAeFw0y
MDEyMTEwOTUzNTNaFw0zMDEyMDkwOTUzNTNaMFkxCzAJBgNVBAYTAkNOMRAwDgYD
VQQIDAdCZWlqaW5nMRMwEQYDVQQKDApDaGFpbk1ha2VyMQswCQYDVQQLDAJjYTEW
MBQGA1UEAwwNQ2hhaW5NYWtlciBDQTBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IA
BGD0MA3oFq8Nsq0gsYwk3grZAA2Znsm35N6kemROoHksh2av7Cv8NFFfSR+lWv9c
FKEI7VPv/wQWmXwSq9sB0yGjgY0wgYowHQYDVR0OBBYEFAUj6AEg1N6Sobbq8AgA
Q3WcjpNWMB8GA1UdIwQYMBaAFDyeTR48wh+HhCCaATGiOxdATYZqMA8GA1UdEwEB
/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMCcGA1UdEQQgMB6BHGNhLmNoYWlubWFr
ZXJAY2hhaW5tYWtlci5jb20wCgYIKoZIzj0EAwIDSAAwRQIhAKkJ/ZTlRA+q9bej
QUG+eiD8EIEDZRtqCLgeyj0vbtazAiB1acCkxxQTrqR94Ybaxt+2BR2r8vLo1liN
ukDoApEVXg==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIICcDCCAhagAwIBAgIIQv2Sl8rOlCswCgYIKoZIzj0EAwIwWTELMAkGA1UEBhMC
Q04xEDAOBgNVBAgMB0JlaWppbmcxEzARBgNVBAoMCkNoYWluTWFrZXIxCzAJBgNV
BAsMAmNhMRYwFAYDVQQDDA1DaGFpbk1ha2VyIENBMB4XDTIwMTIxMTA5NTQyNFoX
DTMwMTIwOTA5NTQyNFowgYMxCzAJBgNVBAYTAkNOMRAwDgYDVQQIDAdCZWlqaW5n
MRAwDgYDVQQHDAdIYWlkaWFuMR8wHQYDVQQKDBZ3eC1vcmc0LmNoYWlubWFrZXIu
b3JnMQswCQYDVQQLDAJjYTEiMCAGA1UEAwwZY2Eud3gtb3JnNC5jaGFpbm1ha2Vy
Lm9yZzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABCHUGXzfFu554qNb1ujafzj0
NFj0ItsPkeOPtcT8UZeQjho0pbUFhBQ+lIA/jbkQMXkUsX6IYtwpA3x35U0kBM2j
gZwwgZkwHQYDVR0OBBYEFIO1GI8PBEtvS5uPYYl1L9oZZqcVMB8GA1UdIwQYMBaA
FAUj6AEg1N6Sobbq8AgAQ3WcjpNWMBIGA1UdEwEB/wQIMAYBAf8CAQAwDgYDVR0P
AQH/BAQDAgEGMDMGA1UdEQQsMCqBKGNhLnd4LW9yZzQuY2hhaW5tYWtlci5vcmdA
Y2hhaW5tYWtlci5jb20wCgYIKoZIzj0EAwIDSAAwRQIgW5jH1Qbicbc7DyIoPIH2
wLMM7IZ994xgnhwz9TZTvdICIQDDZjuOaxkoMJZ4GJMt1D7ivG1Eql+ENJHKJxGg
N+cvaQ==
-----END CERTIFICATE-----
-----BEGIN CERTIFICATE-----
MIICSDCCAe+gAwIBAgIDDQ/uMAoGCCqGSM49BAMCMGUxCzAJBgNVBAYTAkNOMRAw
DgYDVQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdIYWlkaWFuMRMwEQYDVQQKDApDaGFp
bk1ha2VyMQswCQYDVQQLDAJjYTEQMA4GA1UEAwwHUm9vdCBDQTAeFw0yMDEyMTEw
OTUzMzJaFw00MDEyMDYwOTUzMzJaMGUxCzAJBgNVBAYTAkNOMRAwDgYDVQQIDAdC
ZWlqaW5nMRAwDgYDVQQHDAdIYWlkaWFuMRMwEQYDVQQKDApDaGFpbk1ha2VyMQsw
CQYDVQQLDAJjYTEQMA4GA1UEAwwHUm9vdCBDQTBZMBMGByqGSM49AgEGCCqGSM49
AwEHA0IABFlOSg2Js67xUFlvOaS/P1dhCkpHbYhlZmnl9VcjURB7Il5qFU25Mgsa
oa/zuOSyoiN4I20UcoZCf15YidRA6GKjgY0wgYowHQYDVR0OBBYEFDyeTR48wh+H
hCCaATGiOxdATYZqMB8GA1UdIwQYMBaAFDyeTR48wh+HhCCaATGiOxdATYZqMA8G
A1UdEwEB/wQFMAMBAf8wDgYDVR0PAQH/BAQDAgEGMCcGA1UdEQQgMB6BHGNhLmNo
YWlubWFrZXJAY2hhaW5tYWtlci5jb20wCgYIKoZIzj0EAwIDRwAwRAIgRMmwpstP
u+RfB/p8cxdUf5HEqKDD0ph17PASKr0c/psCIHq8fIVYT0qdHWMLZ+GUAOUAO3NV
vdl5fstgGQjjSXAl
-----END CERTIFICATE-----`,
	},
	},
}

type certificatePair struct {
	certificate string
	sk          string
}
type orgInfo struct {
	orgId         string
	consensusNode certificatePair
	commonNode    certificatePair
	admin         certificatePair
	client        certificatePair
}
type ac struct {
	acInst        protocol.AccessControlProvider
	consensusNode protocol.SigningMember
	commonNode    protocol.SigningMember
	admin         protocol.SigningMember
	client        protocol.SigningMember
}

var orgList = map[string]orgInfo{
	org1Name: {
		orgId: org1Name,
		consensusNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIICwjCCAmigAwIBAgIDByTmMAoGCCqBHM9VAYN1MIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMS5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmcxLmNoYWlubWFrZXIub3JnMB4XDTIwMTEwNTEzNTgzMloXDTI1
MTEwNDEzNTgzMlowgZcxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcxLmNoYWlubWFrZXIub3Jn
MRIwEAYDVQQLEwljb25zZW5zdXMxLzAtBgNVBAMTJmNvbnNlbnN1czEuc2lnbi53
eC1vcmcxLmNoYWlubWFrZXIub3JnMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAE
G4tn2rMk5YMSp++H7x09xaTofAzmcOCfkBOnDYziaXU4wCWg1lj3oemZ4mlRAZh0
SHR3LpNdu9rakFiFEpKURKOBrTCBqjAOBgNVHQ8BAf8EBAMCAaYwDwYDVR0lBAgw
BgYEVR0lADApBgNVHQ4EIgQgmPTnhJHPUNbyDD97PSVfd5jWGbXdQ0es0nPvU0vp
scAwKwYDVR0jBCQwIoAgzLWKqTfSyuMs3xRTqqUN9E52CPEE13lc+btEzu0CSCow
LwYLgSdYj2QLHo9kCwQEIDIwMmRhMmYyMjY1MjRkOTI4NThhOGE2NGI3Nzg1MWJj
MAoGCCqBHM9VAYN1A0gAMEUCIQC3Bg5Wwgf4iFr2m3u38XecQ8lASPf3YBdmPReY
mrrrfAIgX0qjDc8Q0n4bZj4220bl8NOi03cQbyxSm7UlmK1S7nY=
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQg194vXmUZHsqLKSYT
YYAAnnAvpFj2PV8266NwfUP7172gCgYIKoEcz1UBgi2hRANCAAQbi2fasyTlgxKn
74fvHT3FpOh8DOZw4J+QE6cNjOJpdTjAJaDWWPeh6ZniaVEBmHRIdHcuk1272tqQ
WIUSkpRE
-----END EC PRIVATE KEY-----`,
		},
		commonNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIICuzCCAmKgAwIBAgIDCkv8MAoGCCqBHM9VAYN1MIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMS5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmcxLmNoYWlubWFrZXIub3JnMB4XDTIwMTEwNTEzNTgzMloXDTI1
MTEwNDEzNTgzMlowgZExCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcxLmNoYWlubWFrZXIub3Jn
MQ8wDQYDVQQLEwZjb21tb24xLDAqBgNVBAMTI2NvbW1vbjEuc2lnbi53eC1vcmcx
LmNoYWlubWFrZXIub3JnMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEdU6R4Jov
6BM9K04IsgGWG0T8Un7Zt6mpCaQyQNUbLl2zXTN+/VTj4mRBYQk3/9dkJRhwxUXo
KTBkPdE5VDvw1aOBrTCBqjAOBgNVHQ8BAf8EBAMCAaYwDwYDVR0lBAgwBgYEVR0l
ADApBgNVHQ4EIgQgqH+HzUt3bOoJlhWkt4jq5QhVYCvAu2xB9p13im7AqxowKwYD
VR0jBCQwIoAgzLWKqTfSyuMs3xRTqqUN9E52CPEE13lc+btEzu0CSCowLwYLgSdY
j2QLHo9kCwQEIGRkMmMwMTY4YzNhNjQyMmM5Yzg4ODNmMmE1ZjkyNGZmMAoGCCqB
HM9VAYN1A0cAMEQCIDcQ5pYPQJFxaN99JYiYfmdcHsBy3isxPunA3Pdznh5SAiAD
whYEI2BftWTAP2xcCnfThwD07vMNQI8mmMiEgsROew==
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQgCE+HXEhjbilN89HN
/xZ3v4qW5uuL117ez2z5S83uy2mgCgYIKoEcz1UBgi2hRANCAAR1TpHgmi/oEz0r
TgiyAZYbRPxSftm3qakJpDJA1RsuXbNdM379VOPiZEFhCTf/12QlGHDFRegpMGQ9
0TlUO/DV
-----END EC PRIVATE KEY-----`,
		},
		admin: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIChzCCAi2gAwIBAgIDBnqeMAoGCCqBHM9VAYN1MIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMS5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmcxLmNoYWlubWFrZXIub3JnMB4XDTIwMTEwNTEzNTgzMloXDTI1
MTEwNDEzNTgzMlowgY8xCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcxLmNoYWlubWFrZXIub3Jn
MQ4wDAYDVQQLEwVhZG1pbjErMCkGA1UEAxMiYWRtaW4xLnNpZ24ud3gtb3JnMS5j
aGFpbm1ha2VyLm9yZzBZMBMGByqGSM49AgEGCCqBHM9VAYItA0IABPnSMn5pWvFr
6CK9y0stDQ4+9cQ6C/aCjkBUibR1bOoRGu/7qN4J5eLB6Hqqx5CRT0l3pPbjVlZZ
ytKlE5Yp8tajezB5MA4GA1UdDwEB/wQEAwIBpjAPBgNVHSUECDAGBgRVHSUAMCkG
A1UdDgQiBCB6lXvzOruQOONS5cpiLQSMX3swBsekV3qaXVSURE+MlzArBgNVHSME
JDAigCDMtYqpN9LK4yzfFFOqpQ30TnYI8QTXeVz5u0TO7QJIKjAKBggqgRzPVQGD
dQNIADBFAiBHg4vuYudZQVi+dqWtjlEjND0z7zhXRKwZtJ/oqpNp2gIhAKeeQGrR
ZYIFau8Ej2TaUxxl+rjcFzUixfH6LCxtMDwR
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQgPOROARvIF/NR4JXs
/uda/3aPfS010B6GbH1Sgt7d4LugCgYIKoEcz1UBgi2hRANCAAT50jJ+aVrxa+gi
vctLLQ0OPvXEOgv2go5AVIm0dWzqERrv+6jeCeXiweh6qseQkU9Jd6T241ZWWcrS
pROWKfLW
-----END EC PRIVATE KEY-----`,
		},
		client: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIICiDCCAi+gAwIBAgIDAI05MAoGCCqBHM9VAYN1MIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMS5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmcxLmNoYWlubWFrZXIub3JnMB4XDTIwMTEwNTEzNTgzMloXDTI1
MTEwNDEzNTgzMlowgZExCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcxLmNoYWlubWFrZXIub3Jn
MQ8wDQYDVQQLEwZjbGllbnQxLDAqBgNVBAMTI2NsaWVudDEuc2lnbi53eC1vcmcx
LmNoYWlubWFrZXIub3JnMFkwEwYHKoZIzj0CAQYIKoEcz1UBgi0DQgAEQFrySVK9
JVnZ7rGr9/xMEZbC7Bv5uLBw4ltwSFbMCUu6d8s7rG7oO7LSHeBMHHL7kFCdwfSO
gRhcQRem3zsWOKN7MHkwDgYDVR0PAQH/BAQDAgGmMA8GA1UdJQQIMAYGBFUdJQAw
KQYDVR0OBCIEIJfKPpoU8bEWNJBZ+83FBEueDXSvCioJrsLVpEqSXhPHMCsGA1Ud
IwQkMCKAIMy1iqk30srjLN8UU6qlDfROdgjxBNd5XPm7RM7tAkgqMAoGCCqBHM9V
AYN1A0cAMEQCIE0BM4nJTTHsKGhAz5/+p779JE08m3CDassrQvYnvMXaAiBVlT3o
hPVXuR8YuhIXSUmpJNqO7tJC8Y+fah53k0V6fw==
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MIGTAgEAMBMGByqGSM49AgEGCCqBHM9VAYItBHkwdwIBAQQgFI3PaP0L4PvzAxpr
SUaaqMHpPbpQTlF55iwyApvXf5mgCgYIKoEcz1UBgi2hRANCAARAWvJJUr0lWdnu
sav3/EwRlsLsG/m4sHDiW3BIVswJS7p3yzusbug7stId4EwccvuQUJ3B9I6BGFxB
F6bfOxY4
-----END EC PRIVATE KEY-----`,
		},
	},
	org2Name: {
		orgId: org2Name,
		consensusNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDSTCCArKgAwIBAgIDCKIoMA0GCSqGSIb3DQEBCwUAMIGKMQswCQYDVQQGEwJD
TjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMW
d3gtb3JnMi5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYD
VQQDExljYS53eC1vcmcyLmNoYWlubWFrZXIub3JnMB4XDTIxMDEwNDA2NDIzMFoX
DTI2MDEwMzA2NDIzMFowgZcxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5n
MRAwDgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcyLmNoYWlubWFrZXIu
b3JnMRIwEAYDVQQLEwljb25zZW5zdXMxLzAtBgNVBAMTJmNvbnNlbnN1czEuc2ln
bi53eC1vcmcyLmNoYWlubWFrZXIub3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
iQKBgQDuNO/+9+ZbzHRyRNows5LgM+5FwSJ49BZfKizvsczPoTMSN6ibQOdyWpPt
EsdkKKdR6+YBeipdvU9yDU4DoKJ48dMaszS3U6KrAFYVY63GzGMy878qaw/IQGs5
XE4Ua+wLwfmID/piFZU0c5fABpMF2TZuAEWx609aTnuAv0ePyQIDAQABo4GtMIGq
MA4GA1UdDwEB/wQEAwIBpjAPBgNVHSUECDAGBgRVHSUAMCkGA1UdDgQiBCD7AHTa
DAUhoeDhLPRAvbmoQxOjQn/Zx6as8c8jIrG83jArBgNVHSMEJDAigCAY9iZfWmHv
+7W4ziX4dBAzGrxs6Id6B8dRFxLhDjUQaTAvBguBJ1iPZAsej2QLBAQgMTE1OTA3
ZGY5Yjg4NGM0OTg3ZWMyMDgzNmYxNjY1MjYwDQYJKoZIhvcNAQELBQADgYEAl+7n
Xan2y6b3jxtzg3ZKm4QifndZX704db9zLNM87XlnaxdOErZ2f/E8VLt78te/ezEk
vNBYexdnn532s1OD0lSJlW+JeivAPr8HqyQTh1JmDE3/FUSyr2Lbf+cgOy8eZp2N
icCNF0J8rFF/k9cMC48MUKlPyn4WYU1CMDuO18Y=
-----END CERTIFICATE-----`,
			sk: `-----BEGIN RSA PRIVATE KEY-----
MIICXAIBAAKBgQDuNO/+9+ZbzHRyRNows5LgM+5FwSJ49BZfKizvsczPoTMSN6ib
QOdyWpPtEsdkKKdR6+YBeipdvU9yDU4DoKJ48dMaszS3U6KrAFYVY63GzGMy878q
aw/IQGs5XE4Ua+wLwfmID/piFZU0c5fABpMF2TZuAEWx609aTnuAv0ePyQIDAQAB
AoGARsr6zGa2Um/n55Ho2nJz4yfr11U3voSkJXIuWqoXuVkqCW77L/DRGB4tOlbL
ZUvjtigKekPpVWSOuNGVbuSNhBtcnouxV0OpkvMPFEZWPXiXo7ItjS0MRBtLO/Ni
saC84m+2ZxpVgFSSUqceyleL+3CaT1nIw8RnuACsn+dKCyUCQQD9wMTG7o0CG03H
fY9Q/54P1iXsJTZvhLIUV7k4VN62DPlHoQkTOKL+gIfzX91wjp7DDjXH1GzoAUhh
HfomeNp/AkEA8FDtXFNgE4F3vNxe1WJqGjYqzXaoVSoY31a22YGCh5ynnJmtmS9v
YsDurHDo2eMVZAYSp47PNCCgeov7LschtwJBAN2B/gRNz0esf/wJriadzOO0I4x9
e4RjyHQbk7MJ2xP+RUjy2RIvWZFir8qSv6H2zb4l1GqpE5x/Kiik223kB48CQEO8
C6sCNQpKa51n37L1UkKhEd9nmnqmquwIXPFhd5ERroyNJEkQ/awwBRXFnVwMjXLr
40YnEm/24kSoP9wndHECQHB9eU9xLpAbz5U+/DH6xyB/g/P5TglYMynt79U6fp4I
VfRCGpGiaEmKiasmAZ+xQ5JkmOpVk0TXnBvSX/k2VWM=
-----END RSA PRIVATE KEY-----`,
		},
		commonNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDQzCCAqygAwIBAgIDB4aYMA0GCSqGSIb3DQEBCwUAMIGKMQswCQYDVQQGEwJD
TjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMW
d3gtb3JnMi5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYD
VQQDExljYS53eC1vcmcyLmNoYWlubWFrZXIub3JnMB4XDTIxMDEwNDA2NDIzMFoX
DTI2MDEwMzA2NDIzMFowgZExCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5n
MRAwDgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcyLmNoYWlubWFrZXIu
b3JnMQ8wDQYDVQQLEwZjb21tb24xLDAqBgNVBAMTI2NvbW1vbjEuc2lnbi53eC1v
cmcyLmNoYWlubWFrZXIub3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDU
Mt3ohe0V/bvlGF43wUsI/jP/HxrwvtSxMIShTHZMLBrzgx/1o8KMBNqwQMHiH9b8
lEPJqKgCxBWCsNOGQCVSGgxkt2Tq1Am55aaHf02ZI7klftVABARgcgjfc6mOVQjH
qt8pcWnDyXiqwA2CJ8sWCzPXcrCWDBVLg3gmjth6mwIDAQABo4GtMIGqMA4GA1Ud
DwEB/wQEAwIBpjAPBgNVHSUECDAGBgRVHSUAMCkGA1UdDgQiBCBK/HDRizubaG8o
43S4lw9nCr2R8bU29fTnP5YVoz8UsTArBgNVHSMEJDAigCAY9iZfWmHv+7W4ziX4
dBAzGrxs6Id6B8dRFxLhDjUQaTAvBguBJ1iPZAsej2QLBAQgZDcyNzk4OWY3Yzdk
NDM2OWFlN2RjNmQzYTg5MjIxNGMwDQYJKoZIhvcNAQELBQADgYEABlhJklseYH6/
DGdNHuTHClVQ7JtIH+ppYKejY2Ano7MPrlcVeUG+l2MNniNGNu+EKp6A18LZPlIW
G493EkB/HnhNtDKOgNAWDxzcDGdDPRxj83Hwx8x/trjA2LEgmw2SNRXM0iHxRr4w
7Oen6+puVIzHIXP5UuxRpX8lUBovW5k=
-----END CERTIFICATE-----`,
			sk: `-----BEGIN RSA PRIVATE KEY-----
MIICWwIBAAKBgQDUMt3ohe0V/bvlGF43wUsI/jP/HxrwvtSxMIShTHZMLBrzgx/1
o8KMBNqwQMHiH9b8lEPJqKgCxBWCsNOGQCVSGgxkt2Tq1Am55aaHf02ZI7klftVA
BARgcgjfc6mOVQjHqt8pcWnDyXiqwA2CJ8sWCzPXcrCWDBVLg3gmjth6mwIDAQAB
AoGARcxZi+OJocMta+UBEMvm15VuGwvrO6c5pPL1nWzeOJ4FW3YVLCJqms359SHH
5I5elARc69crNIW1IaDyYuV0oJxlqUat9j+KrfbspErH1whrqH43+KiE0RL22AKL
fLP0yI75Sh2oFLYqGnB3dbFdSQjgZOHLh//Blra7WrT7IYECQQDdxh4ZuXoS6MxX
K3C8gCfhsElW9f81w8NbQulJglW2lCo5+P+JjgNMBWc0hvx6tRlTHV5d3TwstU8A
KW7jQRTBAkEA9PJzW9RB40J4X7hE1TU8hxUXv5mImV1835O0bd+MtD3EktpYtSja
6PwrUvm/iR2C8iRYrslUoc4vdHlkjLqaWwJAV5AlylplTJoGNFS+im6/UGjeTCuM
vJmyxJHCsnd3iEMv+PvLSXB89MMdYKv7fCeM/DgYTk9PtwdPTe0OD0RfAQJAJ2xu
TLVY9W7ZWO6bhYVP/J3UeK4JYkW9t25ad+SnDMt0O/6QkHfG5ADSKESyIytwy/A1
pcwZpwE8eg6ftFbESQJAD7K6Zkyb4D7hltlkSIfEBqQjoGGp74SDEHWFK9glglMj
z05NKJVYJllWzeer6cxexdLz5f4SUQRj1/WBmWTggg==
-----END RSA PRIVATE KEY-----`,
		},
		admin: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDITCCAoqgAwIBAgIDBj1xMA0GCSqGSIb3DQEBCwUAMIGKMQswCQYDVQQGEwJD
TjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMW
d3gtb3JnMi5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYD
VQQDExljYS53eC1vcmcyLmNoYWlubWFrZXIub3JnMB4XDTIxMDEwNDA2NDIzMFoX
DTI2MDEwMzA2NDIzMFowgY8xCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5n
MRAwDgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcyLmNoYWlubWFrZXIu
b3JnMQ4wDAYDVQQLEwVhZG1pbjErMCkGA1UEAxMiYWRtaW4xLnNpZ24ud3gtb3Jn
Mi5jaGFpbm1ha2VyLm9yZzCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA8jsR
YcC3kQmMnPE15FcgIPWVn26DnmxGRDtgtwoWbTcJxJ387Mwurwgcagkql2M+V46w
slrN67F5BHsINf0p7aj+qZbj/lx19/hjNu4+gtfZ5+FTv6f0fYpEGhKrPrIgD/Y4
sPLQHlfHOMsmkZo35yjFtHeezm/9mP3s7ldV1skCAwEAAaOBjTCBijAOBgNVHQ8B
Af8EBAMCAaYwDwYDVR0lBAgwBgYEVR0lADApBgNVHQ4EIgQgNgXQJAMFHHU3GSmO
I5SyKdGfSpd5hssit+qA+1yCaSYwKwYDVR0jBCQwIoAgGPYmX1ph7/u1uM4l+HQQ
Mxq8bOiHegfHURcS4Q41EGkwDwYLgSdYj2QLHo9kCwQEADANBgkqhkiG9w0BAQsF
AAOBgQB/laVQVs8MnC7cl+V0HA6ot/pgu2HKLludBv3/clzv016n4zJOZvbQIRbI
5RMvJaLk8yuGUcbzfIbXck06XsXsJQiPgY91C5zSJT7I8vTkOOS7tEG8FtPW9DiG
Ijxms3tGpViORzhAwBgGdZUWqtNf+iWxKD43oZ4HYtj3h2TrRQ==
-----END CERTIFICATE-----`,
			sk: `-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQDyOxFhwLeRCYyc8TXkVyAg9ZWfboOebEZEO2C3ChZtNwnEnfzs
zC6vCBxqCSqXYz5XjrCyWs3rsXkEewg1/SntqP6pluP+XHX3+GM27j6C19nn4VO/
p/R9ikQaEqs+siAP9jiw8tAeV8c4yyaRmjfnKMW0d57Ob/2Y/ezuV1XWyQIDAQAB
AoGAd9WtBbU3mzMkM0hJpwtLQ8L7IIKl7qwWHw9ZC3ScH6/Iz1JxnBxvQ/w5QmQC
hB5+6wYWeEXf9ag4/HR5XWw/XvOEmtWvCdzMekTji0DAYq+fgYSUM+oa7SvZZnz3
dfzzru5vA24/ojZsY3MWcI1OfmbaosgMdR5V278dCZDyemECQQD6o9Pq73tEKVsR
yD42gOP4oDRXd3RQpGrQYOFpozpgh6RCriLKTkL27cZry+y8AbsxI0KebeohlVt8
M8pt7GbNAkEA92kzzdRVBBE+SBrmPTMZjtgJQWT3zOAttUWZ6zL6ilZ1oierIEmC
I4JvbG42fFeGtjuUhYxRGusbFr5kwLdX7QJAepxCQx+8MW/5uQ04QflzjGDyugcZ
w4lrJ1z9aGwNVsOEO4psQoNehuVyt7Eesio2pKcXI+GpM5yZEH1Vfciz0QJBAKFU
kXpDXhij4dgE6mO34Y+a4hYpb8jB2ixdMWwENwlkLZrKgTUxmdHr6Rpsl8znCink
mgmnoO+LpYNkLbDZHVUCQQCHP04Y4AMCjqixWLeL/0Z9zxzfdf2OmxWAlAERsdyx
KHO4+kicQaz7oxY63KbuXtD8DQDx8Dl9fm67kKwKaEq/
-----END RSA PRIVATE KEY-----`,
		},
		client: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDIzCCAoygAwIBAgIDAxmwMA0GCSqGSIb3DQEBCwUAMIGKMQswCQYDVQQGEwJD
TjEQMA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMW
d3gtb3JnMi5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYD
VQQDExljYS53eC1vcmcyLmNoYWlubWFrZXIub3JnMB4XDTIxMDEwNDA2NDIzMFoX
DTI2MDEwMzA2NDIzMFowgZExCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5n
MRAwDgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmcyLmNoYWlubWFrZXIu
b3JnMQ8wDQYDVQQLEwZjbGllbnQxLDAqBgNVBAMTI2NsaWVudDEuc2lnbi53eC1v
cmcyLmNoYWlubWFrZXIub3JnMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD0
QPq+Hn6xifwkjtITfJIh9Ap064JMr5AyyfjVu8By7aV37ak78pQeYmaNt/2xPpQ9
BmYzHdI58LS1bTnM3Z24wp2V42RnQROPUYxEpxDSJrcxSmb1ZreEO7IAXtsf83qa
Th/55pfCYjBiL3060ml4PtL/YfvZyUrHwpbB2ecuewIDAQABo4GNMIGKMA4GA1Ud
DwEB/wQEAwIBpjAPBgNVHSUECDAGBgRVHSUAMCkGA1UdDgQiBCC0XWSVhk8dN+Bq
w+1x5c1yZBVvYmi5OebXser7ACkO9DArBgNVHSMEJDAigCAY9iZfWmHv+7W4ziX4
dBAzGrxs6Id6B8dRFxLhDjUQaTAPBguBJ1iPZAsej2QLBAQAMA0GCSqGSIb3DQEB
CwUAA4GBAMDievVsBZoSf1BdJ8Q7svMnhTl94nmHUPB2kV9iow+P4Bu/yIgwxB6Q
ogtba1Ym8/BjgWaj49NtOru6hfTBqiRvbR2B+zZUO8+9QYzhLTPiYcwT9jswVQv2
RVZrp/btTf1/uWIGIrS1UZZn76l7pveQLr2bsNHkewHSw/MxAYJ0
-----END CERTIFICATE-----`,
			sk: `-----BEGIN RSA PRIVATE KEY-----
MIICXgIBAAKBgQD0QPq+Hn6xifwkjtITfJIh9Ap064JMr5AyyfjVu8By7aV37ak7
8pQeYmaNt/2xPpQ9BmYzHdI58LS1bTnM3Z24wp2V42RnQROPUYxEpxDSJrcxSmb1
ZreEO7IAXtsf83qaTh/55pfCYjBiL3060ml4PtL/YfvZyUrHwpbB2ecuewIDAQAB
AoGBANVzU6yBicYtB6QLC5rr6eiyE9FJXn0Vj7ZSuppNkUjeVRQRJSu2Oaqz41tF
xvX18iXCSd2x2d24dLN32GMn6IOwt1HHmpkSNJHVwp+6bkEkeqDf/H54xwuYvSx5
BKp273KbKdwuk4QZX7tBNiDmou3nUp5RTdGDssBJSSJtffHBAkEA/ZAGyMubfaHM
gjK6Hy5UUjdP6EJmzozty9rvyESC5Rpu5+pQxR474/QGNGVmh8DewQGydITRcJY3
/Gfy7FXgBwJBAPaaC7GWnJNb27lENEHORYhsQqwj65SZ/mPJKrx87D8khC15v8Ou
AgTsarWbV5P7ynizoYQr49RglMxTux+g+O0CQQCE0aHMImMjjtJKTPoThTgkDNct
iULC5S1WwCskE0chbRQ1JRcD+g9TG6r4XTk02QGVxibNRBlVSUqwS18DDwSXAkEA
yz4/MQiO16y3tUQPRcU57aw8bx/Tw8//qEJeZKcZFxmDju9vK1m49FHdyPvU/HRj
dYOnNQXvalSHjrfb27+SKQJAPrV42njpQpj2a0X8/Hl+Fe4Jyv/Z6aVTjQhV4t9r
uZ56x/Z2Vvpmc9fHED2MY561H31vCM6DPPv7aaafgvsRRw==
-----END RSA PRIVATE KEY-----`,
		},
	},
	org3Name: {
		orgId: org3Name,
		consensusNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIICwzCCAmigAwIBAgIDDwE5MAoGCCqGSM49BAMCMIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMy5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmczLmNoYWlubWFrZXIub3JnMB4XDTIwMTExMDExMzM1NFoXDTI1
MTEwOTExMzM1NFowgZcxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmczLmNoYWlubWFrZXIub3Jn
MRIwEAYDVQQLEwljb25zZW5zdXMxLzAtBgNVBAMTJmNvbnNlbnN1czEuc2lnbi53
eC1vcmczLmNoYWlubWFrZXIub3JnMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAE
PLCO49dUeBf0UXzgns8DG+0LoRNqNMMMJ/4EplswXiO8UptptHf3v09PiljRhJrW
5MB1HG8U8ZUaSlPww6jE5aOBrTCBqjAOBgNVHQ8BAf8EBAMCAaYwDwYDVR0lBAgw
BgYEVR0lADApBgNVHQ4EIgQgultexOkG7tzIaE1N5j3a6aJSd9rDv7ZxzoQ5VhGN
wygwKwYDVR0jBCQwIoAgZV9SBjHrr3cxxNkus2L9Ewf3qJ8MXySChRSa5PQy/Bsw
LwYLgSdYj2QLHo9kCwQEIDc0MDQxMmVhMDJmYjQ3MDRiYzZhMDA4MWU0MDQyMDU1
MAoGCCqGSM49BAMCA0kAMEYCIQDnvRjgBZquz4LZF0PMs5Pvy09w6mBiOkJ94o86
65IBMwIhAIWAyBb9zqxnYZ0AcVZNK8VGhnq8egyW6i+NbwRtAZAF
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIIrF6NrPa+HGotEmJWVr9q3ScwkFU+HwQTs+KnRcIqpjoAoGCCqGSM49
AwEHoUQDQgAEPLCO49dUeBf0UXzgns8DG+0LoRNqNMMMJ/4EplswXiO8UptptHf3
v09PiljRhJrW5MB1HG8U8ZUaSlPww6jE5Q==
-----END EC PRIVATE KEY-----`,
		},
		commonNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIICvDCCAmKgAwIBAgIDDvFNMAoGCCqGSM49BAMCMIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMy5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmczLmNoYWlubWFrZXIub3JnMB4XDTIwMTExMDExMzM1NFoXDTI1
MTEwOTExMzM1NFowgZExCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmczLmNoYWlubWFrZXIub3Jn
MQ8wDQYDVQQLEwZjb21tb24xLDAqBgNVBAMTI2NvbW1vbjEuc2lnbi53eC1vcmcz
LmNoYWlubWFrZXIub3JnMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAERWRQy34o
dWgthGRsZaDaR5nX2CPZEi17iUOR7+n12+fS7wnHB9kE1X6R/a23+eW45AyrX/j7
lIjJRCbFwtFSmaOBrTCBqjAOBgNVHQ8BAf8EBAMCAaYwDwYDVR0lBAgwBgYEVR0l
ADApBgNVHQ4EIgQgk+PPzU6rC6lnG1mx/o/Zwt0VTYHbf6E9DnbnuaCa5PAwKwYD
VR0jBCQwIoAgZV9SBjHrr3cxxNkus2L9Ewf3qJ8MXySChRSa5PQy/BswLwYLgSdY
j2QLHo9kCwQEIDM0NTc1ZTdhM2Y2NjQyN2I5OTkyZGVjZTg5NmVhMTM3MAoGCCqG
SM49BAMCA0gAMEUCIFRYC0flgKWAjznEf7aMQzlPwAjUxTWaEvY991SvAzg+AiEA
nJg2aSIJoTHLBQF8lDeIvakmHsqSyE39AOqaBPVilFE=
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIF/qnrv0vtwdrKMjqctduDjGjywCtJ3AdeJzL20/vw0soAoGCCqGSM49
AwEHoUQDQgAERWRQy34odWgthGRsZaDaR5nX2CPZEi17iUOR7+n12+fS7wnHB9kE
1X6R/a23+eW45AyrX/j7lIjJRCbFwtFSmQ==
-----END EC PRIVATE KEY-----`,
		},
		admin: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIICiDCCAi2gAwIBAgIDCof/MAoGCCqGSM49BAMCMIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMy5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmczLmNoYWlubWFrZXIub3JnMB4XDTIwMTExMDExMzM1NFoXDTI1
MTEwOTExMzM1NFowgY8xCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmczLmNoYWlubWFrZXIub3Jn
MQ4wDAYDVQQLEwVhZG1pbjErMCkGA1UEAxMiYWRtaW4xLnNpZ24ud3gtb3JnMy5j
aGFpbm1ha2VyLm9yZzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABLe+M5Li3PGb
/Thy2juiLLTkH1s6azzOYe/V2IsRBebdqkvP/yu4Y/kWu3XP8F++DswlRfnU8h+y
lOMsrRINm0KjezB5MA4GA1UdDwEB/wQEAwIBpjAPBgNVHSUECDAGBgRVHSUAMCkG
A1UdDgQiBCApn8vqi9e4X69cbu0UCJwQcPHj9U4tL5Oj/cS6HI/tLTArBgNVHSME
JDAigCBlX1IGMeuvdzHE2S6zYv0TB/eonwxfJIKFFJrk9DL8GzAKBggqhkjOPQQD
AgNJADBGAiEAgaJH8NGOG2ziR1gAPNJ9Lsj/ZHtbghxZxKpQulum7VsCIQCbb+jO
aWgRYgb4B9oH7ugzA5aiquslA6DlCYmYXQcYzA==
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILlJXJoafNFGYDipam3qkaovxxJGdwBYc3Coe0t8xrSwoAoGCCqGSM49
AwEHoUQDQgAEt74zkuLc8Zv9OHLaO6IstOQfWzprPM5h79XYixEF5t2qS8//K7hj
+Ra7dc/wX74OzCVF+dTyH7KU4yytEg2bQg==
-----END EC PRIVATE KEY-----`,
		},
		client: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIICiTCCAi+gAwIBAgIDDqvsMAoGCCqGSM49BAMCMIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnMy5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmczLmNoYWlubWFrZXIub3JnMB4XDTIwMTExMDExMzM1NFoXDTI1
MTEwOTExMzM1NFowgZExCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmczLmNoYWlubWFrZXIub3Jn
MQ8wDQYDVQQLEwZjbGllbnQxLDAqBgNVBAMTI2NsaWVudDEuc2lnbi53eC1vcmcz
LmNoYWlubWFrZXIub3JnMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEYw3hAbKW
HMjwmjWlhz6x5VuF3AGIXHdQNMiER0pSUsE3td5HfB6EPU6AXnKZbII3xAx6uvXE
N+RIOmpA1IvCl6N7MHkwDgYDVR0PAQH/BAQDAgGmMA8GA1UdJQQIMAYGBFUdJQAw
KQYDVR0OBCIEIOa9tWkbXkSkEzl8xEuwhXAVOYXZcu4oRnUMOPWq5O/NMCsGA1Ud
IwQkMCKAIGVfUgYx6693McTZLrNi/RMH96ifDF8kgoUUmuT0MvwbMAoGCCqGSM49
BAMCA0gAMEUCIEC8J3Odc21dtGbZFRCQ9GmvMuGt/1/uwIm+sJOmsEx1AiEA+n0m
L0rzldHoUTtyZjXgR0Xt+p6YwxHeiei4H1SKtBE=
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIIfLeNIHrkL4SGHfdyLyTPSG9Y4Ik098e9uLjcbPnDoboAoGCCqGSM49
AwEHoUQDQgAEYw3hAbKWHMjwmjWlhz6x5VuF3AGIXHdQNMiER0pSUsE3td5HfB6E
PU6AXnKZbII3xAx6uvXEN+RIOmpA1IvClw==
-----END EC PRIVATE KEY-----`,
		},
	},
	org4Name: {
		orgId: org4Name,
		consensusNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDgjCCAymgAwIBAgIITBnwUbBcu10wCgYIKoZIzj0EAwIwgYMxCzAJBgNVBAYT
AkNOMRAwDgYDVQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdIYWlkaWFuMR8wHQYDVQQK
DBZ3eC1vcmc0LmNoYWlubWFrZXIub3JnMQswCQYDVQQLDAJjYTEiMCAGA1UEAwwZ
Y2Eud3gtb3JnNC5jaGFpbm1ha2VyLm9yZzAeFw0yMDEyMTEwOTU1MTNaFw0yMTEy
MjEwOTU1MTNaMIGRMQswCQYDVQQGEwJDTjEQMA4GA1UECAwHQmVpamluZzEQMA4G
A1UEBwwHSGFpZGlhbjEfMB0GA1UECgwWd3gtb3JnNC5jaGFpbm1ha2VyLm9yZzES
MBAGA1UECwwJY29uc2Vuc3VzMSkwJwYDVQQDDCBjb25zZW5zdXMud3gtb3JnNC5j
aGFpbm1ha2VyLm9yZzBZMBMGByqGSM49AgEGCCqGSM49AwEHA0IABDTjWaxFtJl5
NPtS9wZ/yws/JHfhkgiMFbaEobknPOBa3DJJ/nwMxFor60erON7HYdWNcfBekNyp
BXEIFMRpeyajggF1MIIBcTAJBgNVHRMEAjAAMBEGCWCGSAGG+EIBAQQEAwIGQDAz
BglghkgBhvhCAQ0EJhYkT3BlblNTTCBHZW5lcmF0ZWQgU2VydmVyIENlcnRpZmlj
YXRlMB0GA1UdDgQWBBTAaObeMYXF5zjU8ZK+saIhP+cd1TCBiQYDVR0jBIGBMH+A
FIO1GI8PBEtvS5uPYYl1L9oZZqcVoV2kWzBZMQswCQYDVQQGEwJDTjEQMA4GA1UE
CAwHQmVpamluZzETMBEGA1UECgwKQ2hhaW5NYWtlcjELMAkGA1UECwwCY2ExFjAU
BgNVBAMMDUNoYWluTWFrZXIgQ0GCCEL9kpfKzpQrMA4GA1UdDwEB/wQEAwIFoDAT
BgNVHSUEDDAKBggrBgEFBQcDATBMBgNVHREERTBDgg5jaGFpbm1ha2VyLm9yZ4IJ
bG9jYWxob3N0giBjb25zZW5zdXMud3gtb3JnNC5jaGFpbm1ha2VyLm9yZ4cEfwAA
ATAKBggqhkjOPQQDAgNHADBEAiAxTyUbMakkLIcosiHWMEXBnubE3WU/eL6vcq+Z
ochD9QIgJ116KQXzlQG3Mo/+0L+VCEpRHa0LkS8W47Qgt57wmbc=
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MHcCAQEEID5G7isKDQfbzSbmUC20cDkBQ0wv0IWXtSgbW8ToWmigoAoGCCqGSM49
AwEHoUQDQgAENONZrEW0mXk0+1L3Bn/LCz8kd+GSCIwVtoShuSc84FrcMkn+fAzE
WivrR6s43sdh1Y1x8F6Q3KkFcQgUxGl7Jg==
-----END EC PRIVATE KEY-----`,
		},
		commonNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDfDCCAyGgAwIBAgIJALYS8fPgRP6LMAoGCCqGSM49BAMCMIGDMQswCQYDVQQG
EwJDTjEQMA4GA1UECAwHQmVpamluZzEQMA4GA1UEBwwHSGFpZGlhbjEfMB0GA1UE
CgwWd3gtb3JnNC5jaGFpbm1ha2VyLm9yZzELMAkGA1UECwwCY2ExIjAgBgNVBAMM
GWNhLnd4LW9yZzQuY2hhaW5tYWtlci5vcmcwHhcNMjAxMjExMDk1NzA4WhcNMjEx
MjIxMDk1NzA4WjCBizELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB0JlaWppbmcxEDAO
BgNVBAcMB0hhaWRpYW4xHzAdBgNVBAoMFnd4LW9yZzQuY2hhaW5tYWtlci5vcmcx
DzANBgNVBAsMBmNvbW1vbjEmMCQGA1UEAwwdY29tbW9uLnd4LW9yZzQuY2hhaW5t
YWtlci5vcmcwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASH8m6Ch2kwlrZb5neo
bBDgwBxJMf89vl11Z3ATP3OPgs5SBQTF2dLk03rZu9J39juVBnOP8WQY6bFLxfW6
Kvi1o4IBcjCCAW4wCQYDVR0TBAIwADARBglghkgBhvhCAQEEBAMCBkAwMwYJYIZI
AYb4QgENBCYWJE9wZW5TU0wgR2VuZXJhdGVkIFNlcnZlciBDZXJ0aWZpY2F0ZTAd
BgNVHQ4EFgQUvz55TmWzDjV4dOpGLslY0gQgkqgwgYkGA1UdIwSBgTB/gBSDtRiP
DwRLb0ubj2GJdS/aGWanFaFdpFswWTELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB0Jl
aWppbmcxEzARBgNVBAoMCkNoYWluTWFrZXIxCzAJBgNVBAsMAmNhMRYwFAYDVQQD
DA1DaGFpbk1ha2VyIENBgghC/ZKXys6UKzAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0l
BAwwCgYIKwYBBQUHAwEwSQYDVR0RBEIwQIIOY2hhaW5tYWtlci5vcmeCCWxvY2Fs
aG9zdIIdY29tbW9uLnd4LW9yZzQuY2hhaW5tYWtlci5vcmeHBH8AAAEwCgYIKoZI
zj0EAwIDSQAwRgIhAKc7zJlHDfzMvLt5E1KwFRgkJFExmRLwsyyJQpgN5xzmAiEA
yCupzRPFfXj3KBeFsyi9W+ia4dmsPsWzFvQ9aNjiF1Y=
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILMlileQxxqyJ7INIzB8J3/e1P+/6pV/oeJrYY1a98PEoAoGCCqGSM49
AwEHoUQDQgAEh/JugodpMJa2W+Z3qGwQ4MAcSTH/Pb5ddWdwEz9zj4LOUgUExdnS
5NN62bvSd/Y7lQZzj/FkGOmxS8X1uir4tQ==
-----END EC PRIVATE KEY-----`,
		},
		admin: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDdzCCAx2gAwIBAgIIUEhNNABeTSgwCgYIKoZIzj0EAwIwgYMxCzAJBgNVBAYT
AkNOMRAwDgYDVQQIDAdCZWlqaW5nMRAwDgYDVQQHDAdIYWlkaWFuMR8wHQYDVQQK
DBZ3eC1vcmc0LmNoYWlubWFrZXIub3JnMQswCQYDVQQLDAJjYTEiMCAGA1UEAwwZ
Y2Eud3gtb3JnNC5jaGFpbm1ha2VyLm9yZzAeFw0yMDEyMTEwOTU4MDdaFw0yMTEy
MjEwOTU4MDdaMIGJMQswCQYDVQQGEwJDTjEQMA4GA1UECAwHQmVpamluZzEQMA4G
A1UEBwwHSGFpZGlhbjEfMB0GA1UECgwWd3gtb3JnNC5jaGFpbm1ha2VyLm9yZzEO
MAwGA1UECwwFYWRtaW4xJTAjBgNVBAMMHGFkbWluLnd4LW9yZzQuY2hhaW5tYWtl
ci5vcmcwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASeZvqvt21bIIfFFjjwoxJW
dN9sJb5FX/sdUGKxYs70TVBatreQxCm/8vhdFjCoJ/IV5QwzjUHrDsVEisBSlQP+
o4IBcTCCAW0wCQYDVR0TBAIwADARBglghkgBhvhCAQEEBAMCBkAwMwYJYIZIAYb4
QgENBCYWJE9wZW5TU0wgR2VuZXJhdGVkIFNlcnZlciBDZXJ0aWZpY2F0ZTAdBgNV
HQ4EFgQUM+OgTqOfdPMZTlpOO3UZBx6FDu0wgYkGA1UdIwSBgTB/gBSDtRiPDwRL
b0ubj2GJdS/aGWanFaFdpFswWTELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB0JlaWpp
bmcxEzARBgNVBAoMCkNoYWluTWFrZXIxCzAJBgNVBAsMAmNhMRYwFAYDVQQDDA1D
aGFpbk1ha2VyIENBgghC/ZKXys6UKzAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAww
CgYIKwYBBQUHAwEwSAYDVR0RBEEwP4IOY2hhaW5tYWtlci5vcmeCCWxvY2FsaG9z
dIIcYWRtaW4ud3gtb3JnNC5jaGFpbm1ha2VyLm9yZ4cEfwAAATAKBggqhkjOPQQD
AgNIADBFAiEAgzLC0L7uZvyiOhN4FJj9AJrdBkx7FRjM7XLvZfIBwtQCIFOPDMIE
PyOB79dNkHX+b2PATieuoFsy658UZF/XXmVe
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MHcCAQEEILxjf+fbF2MI1KNVtBheW6xglzEA8wHvW077shSihFT5oAoGCCqGSM49
AwEHoUQDQgAEnmb6r7dtWyCHxRY48KMSVnTfbCW+RV/7HVBisWLO9E1QWra3kMQp
v/L4XRYwqCfyFeUMM41B6w7FRIrAUpUD/g==
-----END EC PRIVATE KEY-----`,
		},
		client: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDezCCAyGgAwIBAgIJAIfsnRFoiWSPMAoGCCqGSM49BAMCMIGDMQswCQYDVQQG
EwJDTjEQMA4GA1UECAwHQmVpamluZzEQMA4GA1UEBwwHSGFpZGlhbjEfMB0GA1UE
CgwWd3gtb3JnNC5jaGFpbm1ha2VyLm9yZzELMAkGA1UECwwCY2ExIjAgBgNVBAMM
GWNhLnd4LW9yZzQuY2hhaW5tYWtlci5vcmcwHhcNMjAxMjExMDk1OTA0WhcNMjEx
MjIxMDk1OTA0WjCBizELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB0JlaWppbmcxEDAO
BgNVBAcMB0hhaWRpYW4xHzAdBgNVBAoMFnd4LW9yZzQuY2hhaW5tYWtlci5vcmcx
DzANBgNVBAsMBmNsaWVudDEmMCQGA1UEAwwdY2xpZW50Lnd4LW9yZzQuY2hhaW5t
YWtlci5vcmcwWTATBgcqhkjOPQIBBggqhkjOPQMBBwNCAASi/XukwRJtSj+g9JHY
xVqjbNbMfjjKEqiS3E41yaFQxDRS5+NnjLM2uTBUZX3c02Azd+JlFXXr813rY8Nk
RwpNo4IBcjCCAW4wCQYDVR0TBAIwADARBglghkgBhvhCAQEEBAMCBkAwMwYJYIZI
AYb4QgENBCYWJE9wZW5TU0wgR2VuZXJhdGVkIFNlcnZlciBDZXJ0aWZpY2F0ZTAd
BgNVHQ4EFgQUUHxTqZ/incGTbGGuDNdWwoU9yRowgYkGA1UdIwSBgTB/gBSDtRiP
DwRLb0ubj2GJdS/aGWanFaFdpFswWTELMAkGA1UEBhMCQ04xEDAOBgNVBAgMB0Jl
aWppbmcxEzARBgNVBAoMCkNoYWluTWFrZXIxCzAJBgNVBAsMAmNhMRYwFAYDVQQD
DA1DaGFpbk1ha2VyIENBgghC/ZKXys6UKzAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0l
BAwwCgYIKwYBBQUHAwEwSQYDVR0RBEIwQIIOY2hhaW5tYWtlci5vcmeCCWxvY2Fs
aG9zdIIdY2xpZW50Lnd4LW9yZzQuY2hhaW5tYWtlci5vcmeHBH8AAAEwCgYIKoZI
zj0EAwIDSAAwRQIhAIKCBQ42QM+cSvo5pq3VffPzjtDS4e5L7me7Kj8Qd+9cAiB5
5bZiyXyWCRokz8m74qkW119Tx/zm/ufz/61js9Yabg==
-----END CERTIFICATE-----`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MHcCAQEEIBvcz3ln58yWgU3YWXqaG8VBSWYAih39DFclprVIDsnaoAoGCCqGSM49
AwEHoUQDQgAEov17pMESbUo/oPSR2MVao2zWzH44yhKoktxONcmhUMQ0UufjZ4yz
NrkwVGV93NNgM3fiZRV16/Nd62PDZEcKTQ==
-----END EC PRIVATE KEY-----`,
		},
	},
	org5Name: {
		orgId: org5Name,
		consensusNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDFjCCAnegAwIBAgIDCrWUMAoGCCqGSM49BAMCMIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnNS5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmc1LmNoYWlubWFrZXIub3JnMB4XDTIwMTEwMzEyNDkzOFoXDTI1
MTEwMjEyNDkzOFowgZYxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmc1LmNoYWlubWFrZXIub3Jn
MRIwEAYDVQQLEwljb25zZW5zdXMxLjAsBgNVBAMTJWNvbnNlbnN1cy5zaWduLnd4
LW9yZzUuY2hhaW5tYWtlci5vcmcwgZswEAYHKoZIzj0CAQYFK4EEACMDgYYABAEG
yzzGZ9H2hpbIC/nq0mKe1Z/s7oCQiUOX2bwQ0P2BSNVhypD9TfK7Ch0y73NPyFiE
fLfISEALkU27LvlO0rx8fQCQwQZOrhzoIJSjnBts2WC93gZ77veHFhDC/vkgK3Cy
G6vp4VpkOtdYAijTaa+S/pJAEgtmmdMzQOnlKswxc89UJqN7MHkwDgYDVR0PAQH/
BAQDAgGmMA8GA1UdJQQIMAYGBFUdJQAwKQYDVR0OBCIEIEfm0bcKaRNPiHcd+pp8
vKHOH7zNpoQhlpMcZ9H63nqNMCsGA1UdIwQkMCKAINQjMgfDxLZBJx5zs69ax+Wp
YdYuou/+CBB6kQk6cMxeMAoGCCqGSM49BAMCA4GMADCBiAJCAawaUIHAjJl5pWE/
zhVJQQ34QhQx1iVmjavjIBOfI0zYBjBOp7S1sy8Q1aN1AXcr+f3GuxyLSH42xjqq
0rOav0ehAkIAz0oyA+az0e7WrwCo1J4MBJdhCM3eNvQ7qr1W5vKdLN+29uAEvZqq
wEsXKoUWrm8zb4AzjwSm9dJQ58GyXxF3au0=
-----END CERTIFICATE-----
`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MIHcAgEBBEIAR+fqGlBxuS4QMV3gCnHIp23PIX4Bsm07UjFDaZHpEZj8GfIfKViW
h8xF52uWvVmFn9XB4K3Pk86W9MRl8l3jDpKgBwYFK4EEACOhgYkDgYYABAEGyzzG
Z9H2hpbIC/nq0mKe1Z/s7oCQiUOX2bwQ0P2BSNVhypD9TfK7Ch0y73NPyFiEfLfI
SEALkU27LvlO0rx8fQCQwQZOrhzoIJSjnBts2WC93gZ77veHFhDC/vkgK3CyG6vp
4VpkOtdYAijTaa+S/pJAEgtmmdMzQOnlKswxc89UJg==
-----END EC PRIVATE KEY-----
`,
		},
		commonNode: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDDzCCAnGgAwIBAgIDBNplMAoGCCqGSM49BAMCMIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnNS5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmc1LmNoYWlubWFrZXIub3JnMB4XDTIwMTEwMzEyNDkzOFoXDTI1
MTEwMjEyNDkzOFowgZAxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmc1LmNoYWlubWFrZXIub3Jn
MQ8wDQYDVQQLEwZjb21tb24xKzApBgNVBAMTImNvbW1vbi5zaWduLnd4LW9yZzUu
Y2hhaW5tYWtlci5vcmcwgZswEAYHKoZIzj0CAQYFK4EEACMDgYYABAB8uNY95q6E
hAHI0YyVAznywF9K+DMk8vdPyj5cWXqes1MNQAKMKVEc7VJ/DWq/ok/USxB1wzK3
5HdYEIxhCFHfoAC/bo+TXLkH1BAeTbuIiaBsumNAiPXpzAWJWV4Bit64bvKw4m9+
/FYmDthY6LKLSbKOmWl22AjZnsr+3APEmon3R6N7MHkwDgYDVR0PAQH/BAQDAgGm
MA8GA1UdJQQIMAYGBFUdJQAwKQYDVR0OBCIEIFiofKliRuPYZjORq1yxlj4a0WAD
hTQe/dqVgLohtpkJMCsGA1UdIwQkMCKAINQjMgfDxLZBJx5zs69ax+WpYdYuou/+
CBB6kQk6cMxeMAoGCCqGSM49BAMCA4GLADCBhwJBAqPuModBheQ6Q/DSHtUwycc7
Yw1Z+01h+/LiDciam9jYLFXd1y56d0GYdaGe5fXCMWoaK12kYVTGJdEl9o0nv94C
QgCsYZ2ZNhxtIpRHHj3qeNaJQoqhY9HfWwXWCKG+0E3hzfHe+c6SaS2tUJHkRDvH
0BlGwbgqiLsE08tVSCZMDaC5XA==
-----END CERTIFICATE-----
`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MIHcAgEBBEIApGji1ggOUvssFP+QL6tIj4SO0XPQsKccUwtLAn4SjaPdis316pQ4
T3lkHlxjlyK/us2tlUaIOyHHZEJRGt0XpwSgBwYFK4EEACOhgYkDgYYABAB8uNY9
5q6EhAHI0YyVAznywF9K+DMk8vdPyj5cWXqes1MNQAKMKVEc7VJ/DWq/ok/USxB1
wzK35HdYEIxhCFHfoAC/bo+TXLkH1BAeTbuIiaBsumNAiPXpzAWJWV4Bit64bvKw
4m9+/FYmDthY6LKLSbKOmWl22AjZnsr+3APEmon3Rw==
-----END EC PRIVATE KEY-----
`,
		},
		admin: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDDjCCAm+gAwIBAgIDBk9RMAoGCCqGSM49BAMCMIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnNS5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmc1LmNoYWlubWFrZXIub3JnMB4XDTIwMTEwMzEyNDkzOFoXDTI1
MTEwMjEyNDkzOFowgY4xCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmc1LmNoYWlubWFrZXIub3Jn
MQ4wDAYDVQQLEwVhZG1pbjEqMCgGA1UEAxMhYWRtaW4uc2lnbi53eC1vcmc1LmNo
YWlubWFrZXIub3JnMIGbMBAGByqGSM49AgEGBSuBBAAjA4GGAAQBmIcgxky1+uXc
HnHC5vAs+Pa/DbDLtRJWF3keeQ6C80TxxhgU2PeN1WRdw/TbMeccsKd0v/GVBbpP
EVJnu4w1kisAIePT3eQ2nsz83yyoiELpXltHWIHJZwdUmo+O7V9CrK+v5qgwr/ou
5CEIh8NAW9tgegPV7eawR7dmpnRoBIDwhKujezB5MA4GA1UdDwEB/wQEAwIBpjAP
BgNVHSUECDAGBgRVHSUAMCkGA1UdDgQiBCAfwbJx/O6ydoXBuddzvpvpCVxl6u/o
NqcXq+9Huu9W9DArBgNVHSMEJDAigCDUIzIHw8S2QScec7OvWsflqWHWLqLv/ggQ
epEJOnDMXjAKBggqhkjOPQQDAgOBjAAwgYgCQgGXnprSllzVVy8VDrIKhcGIPOuh
RIKUvbz9++0HA6PVV9kA7OMebb4QR6RySo9n9CsDfMu8jP4u1IwGrIoLM+SWcgJC
AeoCe6pUmp9rgKL73Pcdx/AX9Fl4pkKyVMQQL0ffIKFSXYHo8K3L3qaH735lH+tZ
e7cUHEDBvgpUL984LyF05Wqx
-----END CERTIFICATE-----
`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MIHcAgEBBEIAWC28V/DlqvAfausZlQzVaqWj45aBqMGhmmDMQIslG2B/W+7oHTxG
oPH3bNbbDONhvNcG9fRCpbt9e+53tqzppzCgBwYFK4EEACOhgYkDgYYABAGYhyDG
TLX65dweccLm8Cz49r8NsMu1ElYXeR55DoLzRPHGGBTY943VZF3D9Nsx5xywp3S/
8ZUFuk8RUme7jDWSKwAh49Pd5DaezPzfLKiIQuleW0dYgclnB1Saj47tX0Ksr6/m
qDCv+i7kIQiHw0Bb22B6A9Xt5rBHt2amdGgEgPCEqw==
-----END EC PRIVATE KEY-----
`,
		},
		client: certificatePair{
			certificate: `-----BEGIN CERTIFICATE-----
MIIDDzCCAnGgAwIBAgIDCWtwMAoGCCqGSM49BAMCMIGKMQswCQYDVQQGEwJDTjEQ
MA4GA1UECBMHQmVpamluZzEQMA4GA1UEBxMHQmVpamluZzEfMB0GA1UEChMWd3gt
b3JnNS5jaGFpbm1ha2VyLm9yZzESMBAGA1UECxMJcm9vdC1jZXJ0MSIwIAYDVQQD
ExljYS53eC1vcmc1LmNoYWlubWFrZXIub3JnMB4XDTIwMTEwMzEyNDkzOFoXDTI1
MTEwMjEyNDkzOFowgZAxCzAJBgNVBAYTAkNOMRAwDgYDVQQIEwdCZWlqaW5nMRAw
DgYDVQQHEwdCZWlqaW5nMR8wHQYDVQQKExZ3eC1vcmc1LmNoYWlubWFrZXIub3Jn
MQ8wDQYDVQQLEwZjbGllbnQxKzApBgNVBAMTImNsaWVudC5zaWduLnd4LW9yZzUu
Y2hhaW5tYWtlci5vcmcwgZswEAYHKoZIzj0CAQYFK4EEACMDgYYABADBnffI/G6+
Qi8gjLbnjx64O0WkltZF16fKmGkgVJD+cWT9cyDl8QKT8wuGb18gkJsllxBtgvV+
8WSV+xad2YQXsABQF3VZRqn0+Qni2WblYKKEkMFv186b1ye9iZJNviF3vT6TiNFs
27DyjMHY5cVorqXs4krmuCg9j22BvUuSOe7qwKN7MHkwDgYDVR0PAQH/BAQDAgGm
MA8GA1UdJQQIMAYGBFUdJQAwKQYDVR0OBCIEIJkE0L4DIUi5v5FXIQKUZsvpgXNc
pWddbWy3nxLEpm7JMCsGA1UdIwQkMCKAINQjMgfDxLZBJx5zs69ax+WpYdYuou/+
CBB6kQk6cMxeMAoGCCqGSM49BAMCA4GLADCBhwJCANJvZHhqz9jIBP90KEgbwE8v
zgvTDkV7SCPL4WUAUa6b8LHju+gvzLjHpXHkcmaFfkRN74Cnk4T8ZOjxqbDb7ggw
AkEu6xAdUFPUbYNFWDUTe9tlaz1ikK9tXlKDxqqkgJaR3Zq70aMqQtKZVSWdjkZc
xMrdrd/Y6esiX1v8LCFeJSyJGw==
-----END CERTIFICATE-----
`,
			sk: `-----BEGIN EC PRIVATE KEY-----
MIHcAgEBBEIB4W5F+XtkbxgC6Hk00E3sTqGWxFOB1R+ZVmCis9YmL0vpWgCF/6TH
ze4bQ7y1JVhBjus3COSAfPOWxOuR+sOySaegBwYFK4EEACOhgYkDgYYABADBnffI
/G6+Qi8gjLbnjx64O0WkltZF16fKmGkgVJD+cWT9cyDl8QKT8wuGb18gkJsllxBt
gvV+8WSV+xad2YQXsABQF3VZRqn0+Qni2WblYKKEkMFv186b1ye9iZJNviF3vT6T
iNFs27DyjMHY5cVorqXs4krmuCg9j22BvUuSOe7qwA==
-----END EC PRIVATE KEY-----
`,
		},
	},
}

var acsMap = map[string]ac{}

func createTempDirWithCleanFunc() (string, func(), error) {
	var td = filepath.Join("./temp")
	err := os.MkdirAll(td, os.ModePerm)
	if err != nil {
		return "", nil, err
	}
	var cleanFunc = func() {
		_ = os.RemoveAll(td)
		_ = os.RemoveAll(filepath.Join("./default.log"))
		now := time.Now()
		_ = os.RemoveAll(filepath.Join("./default.log." + now.Format("2006010215")))
		now = now.Add(-5 * time.Hour)
		_ = os.RemoveAll(filepath.Join("./default.log." + now.Format("2006010215")))
	}
	return td, cleanFunc, nil
}

func constructAC(t *testing.T, info orgInfo) ac {
	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, info.orgId+".key")
	localCertFile := filepath.Join(td, info.orgId+".crt")
	err = ioutil.WriteFile(localPrivKeyFile, []byte(info.consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(info.consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, info.orgId, nil, logger)
	require.Nil(t, err)
	consensusMember, err := acInst.NewMemberFromCertPem(info.orgId, info.consensusNode.certificate)
	require.Nil(t, err)
	consensusNode, err := acInst.NewSigningMember(consensusMember, info.consensusNode.sk, "")
	require.Nil(t, err)
	commonMember, err := acInst.NewMemberFromCertPem(info.orgId, info.commonNode.certificate)
	require.Nil(t, err)
	commonNode, err := acInst.NewSigningMember(commonMember, info.commonNode.sk, "")
	require.Nil(t, err)
	adminMember, err := acInst.NewMemberFromCertPem(info.orgId, info.admin.certificate)
	require.Nil(t, err)
	admin, err := acInst.NewSigningMember(adminMember, info.admin.sk, "")
	require.Nil(t, err)
	clientMember, err := acInst.NewMemberFromCertPem(info.orgId, info.client.certificate)
	require.Nil(t, err)
	client, err := acInst.NewSigningMember(clientMember, info.client.sk, "")
	require.Nil(t, err)
	return ac{
		acInst:        acInst,
		consensusNode: consensusNode,
		commonNode:    commonNode,
		admin:         admin,
		client:        client,
	}
}

func TestNewAccessControlWithChainConfig(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)
}

func TestAccessControlGetHashAlg(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)
	fmt.Printf("hash alg: %s\n", acInst.GetHashAlg())
}

func TestAccessControlValidateResourcePolicy(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)

	resourcePolicy := &config.ResourcePolicy{
		ResourceName: "INIT_CONTRACT",
		Policy:       &pbac.Policy{Rule: "ANY"},
	}
	ok := acInst.ValidateResourcePolicy(resourcePolicy)
	require.Equal(t, true, ok)
	resourcePolicy = &config.ResourcePolicy{
		ResourceName: "P2P",
		Policy:       &pbac.Policy{Rule: "ANY"},
	}
	ok = acInst.ValidateResourcePolicy(resourcePolicy)
	require.Equal(t, false, ok)
}

func TestAccessControlLookUpResourceIdByTxType(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)

	resourceId, err := acInst.LookUpResourceNameByTxType(common.TxType_INVOKE_CONTRACT)
	require.Nil(t, err)
	require.Equal(t, protocol.ResourceNameWriteData, resourceId)

	_, err = acInst.LookUpResourceNameByTxType(common.TxType(888))
	require.NotNil(t, err)
}

func TestAccessControlGetLocalOrgId(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)

	require.Equal(t, acInst.GetLocalOrgId(), org1Name)
}

func TestAccessControlGetLocalSigningMember(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)
	signingMember := acInst.GetLocalSigningMember()
	require.NotNil(t, signingMember)
	_, err = signingMember.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
}

func TestAccessControlNewMemberFromCertPem(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)
	member, err := acInst.NewMemberFromCertPem(org2Name, orgList[org2Name].consensusNode.certificate)
	require.Nil(t, err)
	require.NotNil(t, member)
}

func TestAccessControlNewMemberFromProto(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)
	signingMember := acInst.GetLocalSigningMember()
	require.NotNil(t, signingMember)
	signerRead, err := signingMember.GetMember()
	signer, err := acInst.NewMemberFromProto(signerRead)
	require.Nil(t, err)
	require.NotNil(t, signer)
}

func TestAccessControlNewSigningMemberFromCertFile(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)
	signer, err := acInst.NewSigningMemberFromCertFile(org1Name, localPrivKeyFile, "", localCertFile)
	require.Nil(t, err)
	require.NotNil(t, signer)
}

func TestAccessControlNewSigningMember(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	td, cleanFunc, err := createTempDirWithCleanFunc()
	require.Nil(t, err)
	defer cleanFunc()
	logger := logger2.GetLogger(logger2.MODULE_ACCESS)
	localPrivKeyFile := filepath.Join(td, tempOrg1KeyFileName)
	localCertFile := filepath.Join(td, tempOrg1CertFileName)
	err = ioutil.WriteFile(localPrivKeyFile, []byte(orgList[org1Name].consensusNode.sk), os.ModePerm)
	require.Nil(t, err)
	err = ioutil.WriteFile(localCertFile, []byte(orgList[org1Name].consensusNode.certificate), os.ModePerm)
	require.Nil(t, err)
	acInst, err := newAccessControlWithChainConfigPb(localPrivKeyFile, "", localCertFile, chainConf, org1Name, nil, logger)
	require.Nil(t, err)
	require.NotNil(t, acInst)
	member, err := acInst.NewMemberFromCertPem(org2Name, orgList[org2Name].consensusNode.certificate)
	require.Nil(t, err)
	require.NotNil(t, member)
	signer, err := acInst.NewSigningMember(member, orgList[org1Name].consensusNode.sk, "")
	require.Nil(t, err)
	require.NotNil(t, signer)
}

func TestAccessControlCreatePrincipalAndGetValidEndorsementsAndVerifyPrincipal(t *testing.T) {
	localconf.ChainMakerConfig.NodeConfig.SignerCacheSize = 10
	localconf.ChainMakerConfig.NodeConfig.CertCacheSize = 10

	for orgId, info := range orgList {
		acsMap[orgId] = constructAC(t, info)
	}
	acInst := acsMap[org1Name].acInst

	// read
	sigRead, err := acsMap[org1Name].commonNode.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err := acsMap[org1Name].commonNode.GetMember()
	require.Nil(t, err)
	endorsementReadZephyrus := &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err := acInst.CreatePrincipal(protocol.ResourceNameReadData, []*common.EndorsementEntry{endorsementReadZephyrus}, []byte(msg))
	require.Nil(t, err)
	ok, err := acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	validEndorsements, err := acsMap[org2Name].acInst.GetValidEndorsements(principalRead)
	require.Nil(t, err)
	require.Equal(t, len(validEndorsements), 1)
	require.Equal(t, endorsementReadZephyrus.String(), validEndorsements[0].String())
	// read invalid
	sigRead, err = acsMap[org5Name].commonNode.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org5Name].commonNode.GetMember()
	require.Nil(t, err)
	endorsementRead := &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameReadData, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	// wrong signer
	sigRead, err = acsMap[org5Name].commonNode.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org2Name].commonNode.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameReadData, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	// write
	sigRead, err = acsMap[org1Name].admin.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org1Name].admin.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameWriteData, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	sigRead, err = acsMap[org1Name].client.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org1Name].client.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameTxTransact, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	// invalid
	sigRead, err = acsMap[org1Name].commonNode.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org1Name].commonNode.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameTxTransact, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	// P2P
	sigRead, err = acsMap[org1Name].consensusNode.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org1Name].consensusNode.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameP2p, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	sigRead, err = acsMap[org4Name].commonNode.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org4Name].commonNode.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameP2p, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org3Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	// invalid
	sigRead, err = acsMap[org1Name].admin.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org1Name].admin.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameP2p, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	// consensus
	sigRead, err = acsMap[org1Name].consensusNode.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org1Name].consensusNode.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameConsensusNode, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	// invalid
	sigRead, err = acsMap[org4Name].commonNode.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org4Name].commonNode.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameConsensusNode, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org3Name].acInst.VerifyPrincipal(principalRead)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	// self
	sigRead, err = acsMap[org4Name].admin.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org4Name].admin.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipalForTargetOrg(protocol.ResourceNameUpdateSelfConfig, []*common.EndorsementEntry{endorsementRead}, []byte(msg), org4Name)
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	// invalid
	sigRead, err = acsMap[org3Name].admin.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerRead, err = acsMap[org3Name].admin.GetMember()
	require.Nil(t, err)
	endorsementRead = &common.EndorsementEntry{
		Signer:    signerRead,
		Signature: sigRead,
	}
	principalRead, err = acInst.CreatePrincipalForTargetOrg(protocol.ResourceNameUpdateSelfConfig, []*common.EndorsementEntry{endorsementRead}, []byte(msg), org4Name)
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	// majority
	sigEurus, err := acsMap[org4Name].admin.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerEurus, err := acsMap[org4Name].admin.GetMember()
	require.Nil(t, err)
	endorsementEurus := &common.EndorsementEntry{
		Signer:    signerEurus,
		Signature: sigEurus,
	}
	sigAuster, err := acsMap[org3Name].admin.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerAuster, err := acsMap[org3Name].admin.GetMember()
	require.Nil(t, err)
	endorsementAuster := &common.EndorsementEntry{
		Signer:    signerAuster,
		Signature: sigAuster,
	}
	sigZephyrus, err := acsMap[org1Name].admin.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerZephyrus, err := acsMap[org1Name].admin.GetMember()
	require.Nil(t, err)
	endorsementZephyrus := &common.EndorsementEntry{
		Signer:    signerZephyrus,
		Signature: sigZephyrus,
	}
	sigBoreas, err := acsMap[org2Name].admin.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerBoreas, err := acsMap[org2Name].admin.GetMember()
	require.Nil(t, err)
	endorsementBoreas := &common.EndorsementEntry{
		Signer:    signerBoreas,
		Signature: sigBoreas,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameUpdateConfig, []*common.EndorsementEntry{endorsementAuster, endorsementBoreas, endorsementZephyrus, endorsementEurus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	validEndorsements, err = acsMap[org2Name].acInst.GetValidEndorsements(principalRead)
	require.Nil(t, err)
	require.Equal(t, len(validEndorsements), 4)
	principalRead, err = acInst.CreatePrincipal(syscontract.SystemContract_CHAIN_CONFIG.String() + "-" + syscontract.ChainConfigFunction_CONSENSUS_EXT_ADD.String(), []*common.EndorsementEntry{endorsementAuster, endorsementBoreas, endorsementZephyrus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	validEndorsements, err = acsMap[org2Name].acInst.GetValidEndorsements(principalRead)
	require.Nil(t, err)
	require.Equal(t, len(validEndorsements), 3)
	require.Equal(t, endorsementAuster.String(), validEndorsements[0].String())
	require.Equal(t, endorsementBoreas.String(), validEndorsements[1].String())
	require.Equal(t, endorsementZephyrus.String(), validEndorsements[2].String())
	// abnormal
	sigThuellai, err := acsMap[org5Name].admin.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerThuellai, err := acsMap[org5Name].admin.GetMember()
	require.Nil(t, err)
	endorsementThuellai := &common.EndorsementEntry{
		Signer:    signerThuellai,
		Signature: sigThuellai,
	}
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameUpdateConfig, []*common.EndorsementEntry{endorsementAuster, endorsementBoreas, endorsementThuellai, endorsementZephyrus, endorsementEurus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	validEndorsements, err = acsMap[org2Name].acInst.GetValidEndorsements(principalRead)
	require.Nil(t, err)
	require.Equal(t, len(validEndorsements), 4)
	// invalid
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameUpdateConfig, []*common.EndorsementEntry{endorsementAuster, endorsementBoreas, endorsementThuellai, endorsementAuster}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	validEndorsements, err = acsMap[org2Name].acInst.GetValidEndorsements(principalRead)
	require.Nil(t, err)
	require.Equal(t, len(validEndorsements), 2)
	// all
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameAllTest, []*common.EndorsementEntry{endorsementAuster, endorsementBoreas, endorsementZephyrus, endorsementEurus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	// abnormal
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameAllTest, []*common.EndorsementEntry{endorsementAuster, endorsementBoreas, endorsementZephyrus, endorsementEurus, endorsementThuellai}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	// invalid
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameAllTest, []*common.EndorsementEntry{endorsementBoreas, endorsementZephyrus, endorsementEurus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	// threshold
	policyLimit, err := acInst.CreatePrincipal("test_2", []*common.EndorsementEntry{endorsementAuster, endorsementZephyrus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(policyLimit)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	policyLimit, err = acInst.CreatePrincipal("test_2_admin", []*common.EndorsementEntry{endorsementAuster, endorsementZephyrus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(policyLimit)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	// invalid
	policyLimit, err = acInst.CreatePrincipal("test_2", []*common.EndorsementEntry{endorsementAuster, endorsementThuellai}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(policyLimit)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	policyLimit, err = acInst.CreatePrincipal("test_2_admin", []*common.EndorsementEntry{endorsementAuster, endorsementReadZephyrus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(policyLimit)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	// portion
	policyPortion, err := acInst.CreatePrincipal("test_3/4", []*common.EndorsementEntry{endorsementAuster, endorsementReadZephyrus, endorsementEurus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(policyPortion)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	policyPortion, err = acInst.CreatePrincipal("test_3/4_admin", []*common.EndorsementEntry{endorsementAuster, endorsementZephyrus, endorsementEurus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(policyPortion)
	require.Nil(t, err)
	require.Equal(t, true, ok)
	// invalid
	policyPortion, err = acInst.CreatePrincipal("test_3/4", []*common.EndorsementEntry{endorsementAuster, endorsementAuster, endorsementBoreas, endorsementThuellai}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(policyPortion)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	policyPortion, err = acInst.CreatePrincipal("test_3/4_admin", []*common.EndorsementEntry{endorsementAuster, endorsementReadZephyrus, endorsementEurus}, []byte(msg))
	require.Nil(t, err)
	ok, err = acsMap[org2Name].acInst.VerifyPrincipal(policyPortion)
	require.NotNil(t, err)
	require.Equal(t, false, ok)
	// bench
	var timeStart, timeEnd int64
	count := int64(100)
	// any
	principalRead, err = acInst.CreatePrincipal(protocol.ResourceNameReadData, []*common.EndorsementEntry{endorsementRead}, []byte(msg))
	require.Nil(t, err)
	timeStart = time.Now().UnixNano()
	for i := 0; i < int(count); i++ {
		ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	}
	timeEnd = time.Now().UnixNano()
	require.Nil(t, err)
	require.Equal(t, true, ok)
	fmt.Printf("Verify ANY average time (over %d runs in nanoseconds): %d\n", count, (timeEnd-timeStart)/count)
	// self
	principalRead, err = acInst.CreatePrincipalForTargetOrg(protocol.ResourceNameUpdateSelfConfig, []*common.EndorsementEntry{endorsementEurus}, []byte(msg), org4Name)
	require.Nil(t, err)
	timeStart = time.Now().UnixNano()
	for i := 0; i < int(count); i++ {
		ok, err = acsMap[org2Name].acInst.VerifyPrincipal(principalRead)
	}
	timeEnd = time.Now().UnixNano()
	require.Nil(t, err)
	require.Equal(t, true, ok)
	fmt.Printf("Verify SELF average time (over %d runs in nanoseconds): %d\n", count, (timeEnd-timeStart)/count)
	// consensus
	sigZephyrusConsensus, err := acsMap[org1Name].consensusNode.Sign(acInst.GetHashAlg(), []byte(msg))
	require.Nil(t, err)
	signerZephyrusConsensus, err := acsMap[org1Name].consensusNode.GetMember()
	require.Nil(t, err)
	endorsementZephyrusConsensus := &common.EndorsementEntry{
		Signer:    signerZephyrusConsensus,
		Signature: sigZephyrusConsensus,
	}
	policyConsensus, err := acInst.CreatePrincipal(protocol.ResourceNameConsensusNode, []*common.EndorsementEntry{endorsementZephyrusConsensus}, []byte(msg))
	require.Nil(t, err)
	timeStart = time.Now().UnixNano()
	for i := 0; i < int(count); i++ {
		ok, err = acsMap[org2Name].acInst.VerifyPrincipal(policyConsensus)
	}
	timeEnd = time.Now().UnixNano()
	require.Nil(t, err)
	require.Equal(t, true, ok)
	fmt.Printf("Verify CONSENSUS average time (over %d runs in nanoseconds): %d\n", count, (timeEnd-timeStart)/count)
}
